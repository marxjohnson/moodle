{"version":3,"file":"modal_add_random_question.min.js","sources":["../src/modal_add_random_question.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Contain the logic for the add random question modal.\n *\n * @module     mod_quiz/modal_add_random_question\n * @copyright  2018 Ryan Wyllie <ryan@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine([\n    'jquery',\n    'core/notification',\n    'core/modal',\n    'core/modal_events',\n    'core/modal_registry',\n    'core/fragment',\n    'core/templates',\n    'core_form/changechecker',\n    'core/ajax',\n],\nfunction(\n    $,\n    Notification,\n    Modal,\n    ModalEvents,\n    ModalRegistry,\n    Fragment,\n    Templates,\n    FormChangeChecker,\n    ajax,\n) {\n\n    var registered = false;\n    var SELECTORS = {\n        EXISTING_CATEGORY_CONTAINER: '[data-region=\"existing-category-container\"]',\n        EXISTING_CATEGORY_TAB: '#id_existingcategoryheader',\n        NEW_CATEGORY_CONTAINER: '[data-region=\"new-category-container\"]',\n        NEW_CATEGORY_TAB: '#id_newcategoryheader',\n        TAB_CONTENT: '[data-region=\"tab-content\"]',\n        ADD_ON_PAGE_FORM_ELEMENT: '[name=\"addonpage\"]',\n        ADD_RANDOM_BUTTON: 'input[type=\"submit\"][name=\"addrandom\"]',\n        ADD_NEW_CATEGORY_BUTTON: 'input[type=\"submit\"][name=\"newcategory\"]',\n        SUBMIT_BUTTON_ELEMENT: 'input[type=\"submit\"][name=\"addrandom\"], input[type=\"submit\"][name=\"newcategory\"]',\n        FORM_HEADER: 'legend',\n        SELECT_NUMBER_TO_ADD: '#menurandomcount',\n        NEW_CATEGORY_ELEMENT: '#categoryname',\n        PARENT_CATEGORY_ELEMENT: '#parentcategory',\n        FILTER_CONDITION_ELEMENT: '[data-filtercondition]',\n        FORM_ELEMENT: '#add_random_question_form',\n        MESSAGE_INPUT: '[name=\"message\"]',\n    };\n\n    /**\n     * Constructor for the Modal.\n     *\n     * @param {object} root The root jQuery element for the modal\n     */\n    var ModalAddRandomQuestion = function(root) {\n        Modal.call(this, root);\n        this.contextId = null;\n        this.addOnPageId = null;\n        this.category = null;\n        this.returnUrl = null;\n        this.cmid = null;\n        this.loadedForm = false;\n    };\n\n    ModalAddRandomQuestion.TYPE = 'mod_quiz-quiz-add-random-question';\n    ModalAddRandomQuestion.prototype = Object.create(Modal.prototype);\n    ModalAddRandomQuestion.prototype.constructor = ModalAddRandomQuestion;\n\n    /**\n     * Save the Moodle context id that the question bank is being\n     * rendered in.\n     *\n     * @method setContextId\n     * @param {int} id\n     */\n    ModalAddRandomQuestion.prototype.setContextId = function(id) {\n        this.contextId = id;\n    };\n\n    /**\n     * Retrieve the saved Moodle context id.\n     *\n     * @method getContextId\n     * @return {int}\n     */\n    ModalAddRandomQuestion.prototype.getContextId = function() {\n        return this.contextId;\n    };\n\n    /**\n     * Set the id of the page that the question should be added to\n     * when the user clicks the add to quiz link.\n     *\n     * @method setAddOnPageId\n     * @param {int} id\n     */\n    ModalAddRandomQuestion.prototype.setAddOnPageId = function(id) {\n        this.addOnPageId = id;\n        this.getBody().find(SELECTORS.ADD_ON_PAGE_FORM_ELEMENT).val(id);\n    };\n\n    /**\n     * Returns the saved page id for the question to be added to.\n     *\n     * @method getAddOnPageId\n     * @return {int}\n     */\n    ModalAddRandomQuestion.prototype.getAddOnPageId = function() {\n        return this.addOnPageId;\n    };\n\n    /**\n     * Set the category for this form. The category is a comma separated\n     * category id and category context id.\n     *\n     * @method setCategory\n     * @param {string} category\n     */\n    ModalAddRandomQuestion.prototype.setCategory = function(category) {\n        this.category = category;\n    };\n\n    /**\n     * Returns the saved category.\n     *\n     * @method getCategory\n     * @return {string}\n     */\n    ModalAddRandomQuestion.prototype.getCategory = function() {\n        return this.category;\n    };\n\n    /**\n     * Set the return URL for the form.\n     *\n     * @method setReturnUrl\n     * @param {string} url\n     */\n    ModalAddRandomQuestion.prototype.setReturnUrl = function(url) {\n        this.returnUrl = url;\n    };\n\n    /**\n     * Returns the return URL for the form.\n     *\n     * @method getReturnUrl\n     * @return {string}\n     */\n    ModalAddRandomQuestion.prototype.getReturnUrl = function() {\n        return this.returnUrl;\n    };\n\n    /**\n     * Set the course module id for the form.\n     *\n     * @method setCMID\n     * @param {int} id\n     */\n    ModalAddRandomQuestion.prototype.setCMID = function(id) {\n        this.cmid = id;\n    };\n\n    /**\n     * Returns the course module id for the form.\n     *\n     * @method getCMID\n     * @return {int}\n     */\n    ModalAddRandomQuestion.prototype.getCMID = function() {\n        return this.cmid;\n    };\n\n    /**\n     * Moves a given form element inside (a child of) a given tab element.\n     *\n     * Hides the 'legend' (e.g. header) element of the form element because the\n     * tab has the name.\n     *\n     * Moves the submit button into a footer element at the bottom of the form\n     * element for styling purposes.\n     *\n     * @method moveContentIntoTab\n     * @param  {jquery} tabContent The form element to move into the tab.\n     * @param  {jquey} tabElement The tab element for the form element to move into.\n     */\n    ModalAddRandomQuestion.prototype.moveContentIntoTab = function(tabContent, tabElement) {\n        // Hide the header because the tabs show us which part of the form we're\n        // looking at.\n        tabContent.find(SELECTORS.FORM_HEADER).addClass('hidden');\n        // Move the element inside a tab.\n        tabContent.wrap(tabElement);\n    };\n\n    /**\n     * Empty the tab content container and move all tabs from the form into the\n     * tab container element.\n     *\n     * @method moveTabsIntoTabContent\n     * @param  {jquery} form The form element.\n     */\n    ModalAddRandomQuestion.prototype.moveTabsIntoTabContent = function(form) {\n        // Empty it to remove the loading icon.\n        var tabContent = this.getBody().find(SELECTORS.TAB_CONTENT).empty();\n        // Make sure all tabs are inside the tab content element.\n        form.find('[role=\"tabpanel\"]').wrapAll(tabContent);\n    };\n\n    /**\n     * Load the add random question form in a fragement and perform some transformation\n     * on the HTML to convert it into tabs for rendering in the modal.\n     *\n     * @method loadForm\n     * @return {promise} Resolved with form HTML and JS.\n     */\n    ModalAddRandomQuestion.prototype.loadForm = function() {\n        const cmid = this.getCMID();\n        const cat = this.getCategory();\n        const addonpage = this.getAddOnPageId();\n        const returnurl = this.getReturnUrl();\n\n        return Fragment.loadFragment(\n            'mod_quiz',\n            'add_random_question_form',\n            this.getContextId(),\n            {\n                addonpage: addonpage,\n                cat: cat,\n                returnurl: returnurl,\n                cmid: cmid\n            }\n        )\n        .then(function(html, js) {\n            var form = $(html);\n            var existingCategoryTabContent = form.find(SELECTORS.EXISTING_CATEGORY_TAB);\n            var existingCategoryTab = this.getBody().find(SELECTORS.EXISTING_CATEGORY_CONTAINER);\n            var newCategoryTabContent = form.find(SELECTORS.NEW_CATEGORY_TAB);\n            var newCategoryTab = this.getBody().find(SELECTORS.NEW_CATEGORY_CONTAINER);\n\n            // Transform the form into tabs for better rendering in the modal.\n            this.moveContentIntoTab(existingCategoryTabContent, existingCategoryTab);\n            this.moveContentIntoTab(newCategoryTabContent, newCategoryTab);\n            this.moveTabsIntoTabContent(form);\n\n            Templates.replaceNode(this.getBody().find(SELECTORS.TAB_CONTENT), form, js);\n            return;\n        }.bind(this))\n        .then(function() {\n            // Make sure the form change checker is disabled otherwise it'll stop the user from navigating away from the\n            // page once the modal is hidden.\n            FormChangeChecker.disableAllChecks();\n\n            // Select 'menunumbertoadd' element.\n            const numbertoadd = document.querySelector(SELECTORS.SELECT_NUMBER_TO_ADD);\n            // Submit buttons.\n            const submitbuttons = document.querySelectorAll(SELECTORS.SUBMIT_BUTTON_ELEMENT);\n\n            // Enable/Disable submit button.\n            numbertoadd.addEventListener('change', (e) => {\n                if (e.target.value != 0) {\n                    // Enable submit button.\n                    submitbuttons.forEach((button) => {\n                        button.disabled = false;\n                    });\n                } else {\n                    // Disable submit button.\n                    submitbuttons.forEach((button) => {\n                        button.disabled = true;\n                    });\n                }\n            });\n\n            // Add question to quiz.\n            const modal = this;\n            submitbuttons.forEach((button) => {\n                button.addEventListener('click', (e) => {\n                    e.preventDefault();\n\n                    const categoryid = cat.split(',')[0];\n                    const randomcount = document.querySelector(SELECTORS.SELECT_NUMBER_TO_ADD).value;\n                    const filtercondition = document.querySelector(SELECTORS.FILTER_CONDITION_ELEMENT).dataset?.filtercondition;\n\n                    // Add Random questions.\n                    let target = e.target.closest(SELECTORS.ADD_RANDOM_BUTTON);\n                    if (target) {\n                        modal.addQuestions(cmid, categoryid, addonpage, randomcount, filtercondition, '', '');\n                        return;\n                    }\n                    // Add new category if required.\n                    target = e.target.closest(SELECTORS.ADD_NEW_CATEGORY_BUTTON);\n                    if (target) {\n                        let newcategory = document.querySelector(SELECTORS.NEW_CATEGORY_ELEMENT).value;\n                        let parentcategory = document.querySelector(SELECTORS.PARENT_CATEGORY_ELEMENT).value;\n                        modal.addQuestions(cmid, categoryid, addonpage, randomcount, filtercondition,\n                            newcategory, parentcategory);\n                        return;\n                    }\n                });\n            });\n        }.bind(this))\n        .fail(Notification.exception);\n    };\n\n    /**\n     * Call web service function to add random questions\n     *\n     * @param {number} cmid course module id\n     * @param {number} categoryid Question category\n     * @param {number} addonpage the page where random questions will be added to\n     * @param {number} randomcount Number of random questions\n     * @param {string} filtercondition Filter condition\n     * @param {string} newcategory add new category\n     * @param {string} parentcategory parent category of new category\n     */\n    ModalAddRandomQuestion.prototype.addQuestions = function(cmid, categoryid, addonpage, randomcount, filtercondition,\n                                                             newcategory, parentcategory) {\n        const call = {\n            methodname: 'mod_quiz_add_random_question',\n            args: {\n                cmid: cmid,\n                categoryid: categoryid,\n                addonpage: addonpage,\n                randomcount: randomcount,\n                filtercondition: filtercondition,\n                newcategory: newcategory,\n                parentcategory: parentcategory,\n            }\n        };\n        ajax.call([call])[0]\n            .then((response) => {\n                const form = document.querySelector(SELECTORS.FORM_ELEMENT);\n                const messageInput = form.querySelector(SELECTORS.MESSAGE_INPUT);\n                messageInput.value = response.message;\n                form.submit();\n            })\n            .catch(Notification.exception);\n    };\n\n    /**\n     * Override the modal show function to load the form when this modal is first\n     * shown.\n     *\n     * @method show\n     */\n    ModalAddRandomQuestion.prototype.show = function() {\n        Modal.prototype.show.call(this);\n\n        if (!this.loadedForm) {\n            this.loadForm(window.location.search);\n            this.loadedForm = true;\n        }\n    };\n\n    // Automatically register with the modal registry the first time this module is\n    // imported so that you can create modals of this type using the modal factory.\n    if (!registered) {\n        ModalRegistry.register(\n            ModalAddRandomQuestion.TYPE,\n            ModalAddRandomQuestion,\n            'mod_quiz/modal_add_random_question'\n        );\n\n        registered = true;\n    }\n\n    return ModalAddRandomQuestion;\n});\n"],"names":["define","$","Notification","Modal","ModalEvents","ModalRegistry","Fragment","Templates","FormChangeChecker","ajax","registered","SELECTORS","ModalAddRandomQuestion","root","call","this","contextId","addOnPageId","category","returnUrl","cmid","loadedForm","TYPE","prototype","Object","create","constructor","setContextId","id","getContextId","setAddOnPageId","getBody","find","val","getAddOnPageId","setCategory","getCategory","setReturnUrl","url","getReturnUrl","setCMID","getCMID","moveContentIntoTab","tabContent","tabElement","addClass","wrap","moveTabsIntoTabContent","form","empty","wrapAll","loadForm","cat","addonpage","returnurl","loadFragment","then","html","js","existingCategoryTabContent","existingCategoryTab","newCategoryTabContent","newCategoryTab","replaceNode","bind","disableAllChecks","numbertoadd","document","querySelector","submitbuttons","querySelectorAll","addEventListener","e","target","value","forEach","button","disabled","modal","preventDefault","categoryid","split","randomcount","filtercondition","dataset","_document$querySelect","closest","addQuestions","newcategory","parentcategory","fail","exception","methodname","args","response","message","submit","catch","show","window","location","search","register"],"mappings":"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"}