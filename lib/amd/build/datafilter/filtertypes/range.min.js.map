{"version":3,"file":"range.min.js","sources":["../../../src/datafilter/filtertypes/range.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Range filter.\n *\n * @module     core/datafilter/filtertypes/range\n * @copyright  2021 Catalyst IT Australia Pty Ltd\n * @author     Ghaly Marc-Alexandre <marc-alexandreghaly@catalyst-ca.net>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport Filter from 'core/datafilter/filtertype';\nimport Selectors from 'core/datafilter/selectors';\nimport Templates from 'core/templates';\nimport {get_string as getString} from 'core/str';\n\nconst filterRangeOptions = {\n    '0': 'optionone',\n    '1': 'optiontwo',\n    '2': 'optionthree'\n};\nexport default class extends Filter {\n    /**\n     * Constructor for a new filter.\n     *\n     * @param {String} filterType The type of filter that this relates to\n     * @param {HTMLElement} rootNode The root node for the participants filterset\n     * @param {Array} initialValues The initial values for the selector\n     * @param {Object} filterOptions {filterRange, rangeUI}\n     */\n    constructor(filterType, rootNode, initialValues, filterOptions = {filterRange: 0, rangeUI: 'text'}) {\n        super(filterType, rootNode, initialValues);\n        this.filterRange = filterOptions.filterRange;\n        this.setUpRangeUi(filterOptions.rangeUI);\n    }\n\n    /**\n     * Do nothing as we have custom set up for range ui\n     *\n     */\n    async addValueSelector() {\n        // eslint-disable-line no-empty-function\n    }\n\n    /**\n     * Renders one or two input based on given context.\n     *\n     * @param {Object} context Context for mustache containing one or two placeholder.\n     */\n    async displayRange(context) {\n        Templates.render('core/datafilter/filtertypes/range', context)\n        .then((rangeUi, js) => {\n            Templates.replaceNodeContents(this.filterRoot.querySelector(Selectors.filter.regions.values), rangeUi, js);\n            return;\n        }).fail();\n    }\n\n    /**\n     * Adds listenner on filter range region.\n     *\n     * @param {string} type Type of input desired.\n     */\n    async rangeListenner(type) {\n        const placeholderone = await this.placeholderOne;\n        const placeholdertwo = await this.placeholderTwo;\n        this.filterRoot.querySelector(Selectors.filter.fields.range).addEventListener('change', () => {\n            const context = {\n                placeholderone: placeholderone,\n                type: type\n            };\n            if (this.rangetype === 2) {\n                context.placeholdertwo = placeholdertwo;\n            }\n            this.displayRange(context);\n        });\n    }\n\n    /**\n     * Sets up base range UI.\n     *\n     * @param {string} type Type of input desired.\n     */\n    async setUpRangeUi(type) {\n        const placeholderone = await this.placeholderOne;\n        const placeholdertwo = await this.placeholderTwo;\n        const context = {\n            placeholderone: placeholderone,\n            placeholdertwo: placeholdertwo,\n            type: type\n        };\n\n        const filterRangeContext = {};\n        // Default filter range value.\n        filterRangeContext[filterRangeOptions[0]] = true;\n        if (this.filterRange !== undefined) {\n            filterRangeContext[filterRangeOptions[0]] = false;\n            filterRangeContext[filterRangeOptions[this.filterRange]] = true;\n        }\n        // When url parameters loaded supplied - display setup accordingly.\n        if (this.initialValues !== undefined) {\n            context.initialvalueone = this.initialValues[0];\n            // Do not display a second range value if initial value is not between.\n            context.placeholdertwo = null;\n            if (this.initialValues.length > 1) {\n                context.initialvaluetwo = this.initialValues[1];\n                // If multiple values are supplied - display two range inputs.\n                context.placeholdertwo = placeholdertwo;\n            }\n        }\n        Templates.render('core/datafilter/filtertypes/filter_range', filterRangeContext)\n        .then((html, js) => {\n            Templates.replaceNodeContents(this.filterRoot.querySelector(Selectors.filter.regions.range), html, js);\n            this.displayRange(context)\n            .then(() => {\n                this.rangeListenner(type);\n                return;\n            }).catch();\n            return;\n        })\n        .catch();\n    }\n\n    /**\n     * Get the placeholder for range value one.\n     *\n     * @return {String} String\n     */\n    get placeholderOne() {\n        return getString('rangestart', 'core_question');\n    }\n\n    /**\n     * Get the placeholder for range value two.\n     *\n     * @return {String} String\n     */\n    get placeholderTwo() {\n        return getString('rangeend', 'core_question');\n    }\n\n    /**\n     * Get the type of range specified.\n     *\n     * @returns {Number}\n     */\n    get rangetype() {\n        return parseInt(this.filterRoot.querySelector(Selectors.filter.fields.range).value, 10);\n    }\n\n    /**\n     * Get the list of raw values for this filter type.\n     *\n     * @returns {Array}\n     */\n    get rawValues() {\n        const valueSelector = '[data-filter-type=' + this.filterType + '] .rangevalue';\n        const rangeValue1 = this.filterRoot.querySelector(valueSelector + '1').value;\n        const values = [rangeValue1];\n        if (this.rangetype === 2) {\n            const rangeValue2 = this.filterRoot.querySelector(valueSelector + '2').value;\n            values.push(rangeValue2);\n        }\n        return values;\n    }\n\n    get filterOptions() {\n        return {\n            rangetype: this.rangetype\n        };\n    }\n}\n"],"names":["filterRangeOptions","Filter","constructor","filterType","rootNode","initialValues","filterOptions","filterRange","rangeUI","setUpRangeUi","context","render","then","rangeUi","js","replaceNodeContents","this","filterRoot","querySelector","Selectors","filter","regions","values","fail","type","placeholderone","placeholderOne","placeholdertwo","placeholderTwo","fields","range","addEventListener","rangetype","displayRange","filterRangeContext","undefined","initialvalueone","length","initialvaluetwo","html","rangeListenner","catch","parseInt","value","rawValues","valueSelector","rangeValue2","push"],"mappings":";;;;;;;;uOA4BMA,mBAAqB,GAClB,cACA,cACA,sCAEoBC,oBASzBC,YAAYC,WAAYC,SAAUC,mBAAeC,qEAAgB,CAACC,YAAa,EAAGC,QAAS,cACjFL,WAAYC,SAAUC,oBACvBE,YAAcD,cAAcC,iBAC5BE,aAAaH,cAAcE,sDAgBjBE,4BACLC,OAAO,oCAAqCD,SACrDE,MAAK,CAACC,QAASC,yBACFC,oBAAoBC,KAAKC,WAAWC,cAAcC,mBAAUC,OAAOC,QAAQC,QAAST,QAASC,OAExGS,4BAQcC,YACXC,qBAAuBT,KAAKU,eAC5BC,qBAAuBX,KAAKY,oBAC7BX,WAAWC,cAAcC,mBAAUC,OAAOS,OAAOC,OAAOC,iBAAiB,UAAU,WAC9ErB,QAAU,CACZe,eAAgBA,eAChBD,KAAMA,MAEa,IAAnBR,KAAKgB,YACLtB,QAAQiB,eAAiBA,qBAExBM,aAAavB,+BASPc,YACTC,qBAAuBT,KAAKU,eAC5BC,qBAAuBX,KAAKY,eAC5BlB,QAAU,CACZe,eAAgBA,eAChBE,eAAgBA,eAChBH,KAAMA,MAGJU,mBAAqB,GAE3BA,mBAAmBlC,mBAAmB,KAAM,OACnBmC,IAArBnB,KAAKT,cACL2B,mBAAmBlC,mBAAmB,KAAM,EAC5CkC,mBAAmBlC,mBAAmBgB,KAAKT,eAAgB,QAGpC4B,IAAvBnB,KAAKX,gBACLK,QAAQ0B,gBAAkBpB,KAAKX,cAAc,GAE7CK,QAAQiB,eAAiB,KACrBX,KAAKX,cAAcgC,OAAS,IAC5B3B,QAAQ4B,gBAAkBtB,KAAKX,cAAc,GAE7CK,QAAQiB,eAAiBA,oCAGvBhB,OAAO,2CAA4CuB,oBAC5DtB,MAAK,CAAC2B,KAAMzB,yBACCC,oBAAoBC,KAAKC,WAAWC,cAAcC,mBAAUC,OAAOC,QAAQS,OAAQS,KAAMzB,SAC9FmB,aAAavB,SACjBE,MAAK,UACG4B,eAAehB,SAErBiB,WAGNA,QAQDf,4BACO,mBAAU,aAAc,iBAQ/BE,4BACO,mBAAU,WAAY,iBAQ7BI,uBACOU,SAAS1B,KAAKC,WAAWC,cAAcC,mBAAUC,OAAOS,OAAOC,OAAOa,MAAO,IAQpFC,sBACMC,cAAgB,qBAAuB7B,KAAKb,WAAa,gBAEzDmB,OAAS,CADKN,KAAKC,WAAWC,cAAc2B,cAAgB,KAAKF,UAEhD,IAAnB3B,KAAKgB,UAAiB,OAChBc,YAAc9B,KAAKC,WAAWC,cAAc2B,cAAgB,KAAKF,MACvErB,OAAOyB,KAAKD,oBAETxB,OAGPhB,0BACO,CACH0B,UAAWhB,KAAKgB"}