{"version":3,"file":"date.min.js","sources":["../../../src/datafilter/filtertypes/date.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Date filter.\n *\n * @module     core/datafilter/filtertypes/date\n * @copyright  2022 Ghaly Marc-Alexandre <marc-alexandreghaly@catalyst-ca.net>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport Range from 'core/datafilter/filtertypes/range';\n\n export default class extends Range {\n    constructor(filterType, filterSet, initialValues, filterRange) {\n        super(filterType, filterSet, initialValues, filterRange, 'date');\n    }\n\n     /**\n      * Convert initial values from time stamp to date.\n      *\n      * @param {Array} initialValues The initial values for the selector\n      * @returns {Array} validated initial values\n      */\n     validateInitialValues(initialValues) {\n         if (initialValues !== undefined) {\n             initialValues = this.timeStampToDate(initialValues);\n         }\n         return initialValues ?? [];\n     }\n\n    /**\n     * Get dates from provided timestamps.\n     *\n     * @param {Array} initialValues The initial values for each range\n     * @return {Array} dateStrings Array with formated date strings MM/DD/YYYY.\n     */\n    timeStampToDate(initialValues) {\n        const dateStrings = [];\n        Object.values(initialValues).forEach((timestamp) => {\n            const date = new Date(timestamp * 1000);\n            const year = date.getFullYear();\n            const month = (\"0\" + (date.getMonth() + 1)).slice(-2);\n            const day = (\"0\" + (date.getDate() + 1)).slice(-2);\n            const string = year + '-' + month + '-' + day;\n            dateStrings.push(string);\n        });\n        return dateStrings;\n    }\n\n    /**\n     * Get unix timestamps from provided raw dates.\n     *\n     * @return {Array}\n     */\n    get datesFromRaw() {\n        const dateOne = new Date(this.rawValues[0]);\n        const timeStamps = [dateOne.getTime() / 1000];\n        if (this.rawValues[1] !== '' && this.rawValues[1] !== undefined) {\n            const dateTwo = new Date(this.rawValues[1]);\n            timeStamps.push(dateTwo.getTime() / 1000);\n        }\n        return timeStamps;\n    }\n\n    /**\n     * Get the composed value for this filter.\n     *\n     * @returns {Object}\n     */\n    get filterValue() {\n        return {\n            name: this.name,\n            jointype: this.jointype,\n            rangetype: this.rangetype,\n            values: this.datesFromRaw,\n        };\n    }\n }\n"],"names":["Range","constructor","filterType","filterSet","initialValues","filterRange","validateInitialValues","undefined","this","timeStampToDate","dateStrings","Object","values","forEach","timestamp","date","Date","string","getFullYear","getMonth","slice","getDate","push","datesFromRaw","timeStamps","rawValues","getTime","dateTwo","filterValue","name","jointype","rangetype"],"mappings":";;;;;;;kKAwB8BA,eAC1BC,YAAYC,WAAYC,UAAWC,cAAeC,mBACxCH,WAAYC,UAAWC,cAAeC,YAAa,QAS5DC,sBAAsBF,8CACIG,IAAlBH,gBACAA,cAAgBI,KAAKC,gBAAgBL,uCAElCA,uDAAiB,GAS7BK,gBAAgBL,qBACNM,YAAc,UACpBC,OAAOC,OAAOR,eAAeS,SAASC,kBAC5BC,KAAO,IAAIC,KAAiB,IAAZF,WAIhBG,OAHOF,KAAKG,cAGI,KAFP,KAAOH,KAAKI,WAAa,IAAIC,OAAO,GAEf,KADvB,KAAOL,KAAKM,UAAY,IAAID,OAAO,GAEhDV,YAAYY,KAAKL,WAEdP,YAQPa,yBAEMC,WAAa,CADH,IAAIR,KAAKR,KAAKiB,UAAU,IACZC,UAAY,QACd,KAAtBlB,KAAKiB,UAAU,SAAmClB,IAAtBC,KAAKiB,UAAU,GAAkB,OACvDE,QAAU,IAAIX,KAAKR,KAAKiB,UAAU,IACxCD,WAAWF,KAAKK,QAAQD,UAAY,YAEjCF,WAQPI,wBACO,CACHC,KAAMrB,KAAKqB,KACXC,SAAUtB,KAAKsB,SACfC,UAAWvB,KAAKuB,UAChBnB,OAAQJ,KAAKe"}