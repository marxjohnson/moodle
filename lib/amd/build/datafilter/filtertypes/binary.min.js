define("core/datafilter/filtertypes/binary",["exports","core/datafilter/filtertype","core/datafilter/selectors","core/templates","core/str"],(function(_exports,_filtertype,_selectors,_templates,_str){function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}
/**
   * Base filter for binary selector ie: (Yes / No).
   *
   * @module     core/datafilter/filtertypes/binary
   * @author     2022 Ghaly Marc-Alexandre <marc-alexandreghaly@catalyst-ca.net>
   * @copyright  2022 Catalyst IT Australia Pty Ltd
   * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.default=void 0,_filtertype=_interopRequireDefault(_filtertype),_selectors=_interopRequireDefault(_selectors),_templates=_interopRequireDefault(_templates);const binaryOptions={0:"optionone",1:"optiontwo"};class _default extends _filtertype.default{async addValueSelector(){this.getTextValues().then((()=>{this.displayBinarySelection()})).catch((function(){}))}getTextValues(){return(0,_str.get_strings)([{key:"no"},{key:"yes"}]).then((strings=>{this.optionOne=strings[0],this.optionTwo=strings[1]})).catch((function(){}))}displayBinarySelection(){const specificFilterSet=this.rootNode.querySelector(_selectors.default.filter.byName(this.filterType)),context={filtertype:this.filterType,textvalueone:this.optionOne,textvaluetwo:this.optionTwo};context[binaryOptions[1]]=!0,void 0!==this.initialValues&&(context[binaryOptions[1]]=!1,context[binaryOptions[this.initialValues[0]]]=!0),_templates.default.render("core/datafilter/filtertypes/binary_selector",context).then(((binaryUi,js)=>{_templates.default.replaceNodeContents(specificFilterSet.querySelector(_selectors.default.filter.regions.values),binaryUi,js)})).fail()}get values(){return this.filterRoot.querySelector('[data-filterfield="'.concat(this.name,'"]')).value}}return _exports.default=_default,_exports.default}));

//# sourceMappingURL=binary.min.js.map