{"version":3,"file":"filter.min.js","sources":["../src/filter.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Question bank filter management.\n *\n * @module     core_question/filter\n * @copyright  2021 Tomo Tsuyuki <tomotsuyuki@catalyst-au.net>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport CoreFilter from 'core_question/qbank_datafilter';\nimport Notification from 'core/notification';\nimport Selectors from 'core/datafilter/selectors';\nimport Templates from 'core/templates';\nimport Fragment from 'core/fragment';\n\n/**\n * Initialise the question bank filter on the element with the given id.\n *\n * @param {String} filterRegionId id of the filter region\n * @param {String} defaultcourseid default course id\n * @param {String} defaultcategoryid default category id\n * @param {int} perpage number of question per page\n * @param {int} contextId id of the context\n * @param {string} component name of the component for fragment\n * @param {string} callback name of the callback for the fragment\n * @param {string} view the view class for this page\n * @param {int} cmid if this is an activity, the course module ID.\n * @param {string} pagevars name of the callback for the fragment\n * @param {string} extraparams json encoded extra params for the extended apis\n */\nexport const init = (filterRegionId, defaultcourseid, defaultcategoryid,\n                     perpage, contextId, component, callback, view, cmid, pagevars, extraparams) => {\n\n    const SELECTORS = {\n        QUESTION_CONTAINER_ID: '#questionscontainer',\n        QUESTION_TABLE: '#questionscontainer table',\n        SORT_LINK: '#questionscontainer div.sorters a',\n        PAGINATION_LINK: '#questionscontainer a[href].page-link',\n        LASTCHANGED_FIELD: '#questionsubmit input[name=lastchanged]',\n        BULK_ACTIONS: '#bulkactionsui-container input',\n    };\n\n    const filterSet = document.querySelector(`#${filterRegionId}`);\n\n    const filterCondition = {\n        cat: defaultcategoryid,\n        courseid: defaultcourseid,\n        filters: {},\n        filterverb: 0,\n        qpage: 0,\n        qperpage: perpage,\n        sortdata: {},\n        tabname: 'questions',\n    };\n\n    const defaultSort = document.querySelector(SELECTORS.QUESTION_TABLE)?.dataset?.defaultsort;\n    if (defaultSort) {\n        filterCondition.sortData = JSON.parse(defaultSort);\n    }\n\n    let filterQuery = '';\n\n    // Init function with apply callback.\n    const coreFilter = new CoreFilter(filterSet, function(filters, pendingPromise) {\n        applyFilter(filters, pendingPromise);\n    });\n    coreFilter.init();\n\n    /**\n     * Retrieve table data.\n     *\n     * @param {Object} filterdata data\n     * @param {Promise} pendingPromise pending promise\n     */\n    const applyFilter = (filterdata, pendingPromise) => {\n        // Getting filter data.\n        // Otherwise, the ws function should retrieves question based on default courseid and cateogryid.\n        if (filterdata) {\n            // Main join types.\n            filterCondition.filterverb = parseInt(filterSet.dataset.filterverb, 10);\n            delete filterdata.filterverb;\n            // Retrieve fitter info.\n            filterCondition.filters = filterdata;\n            if (Object.keys(filterdata).length !== 0) {\n                if (isNaN(filterCondition.filterverb) === false) {\n                    filterdata.filterverb = filterCondition.filterverb;\n                }\n                updateUrlParams(filterdata);\n            }\n        }\n        // Load questions for first page.\n        const viewData = {\n            view: view,\n            cmid: cmid,\n            filtercondition: JSON.stringify(filterCondition),\n            extraparams: extraparams,\n            filterquery: filterQuery,\n            lastchanged: document.querySelector(SELECTORS.LASTCHANGED_FIELD)?.value ?? null\n        };\n        Fragment.loadFragment(component, callback, contextId, viewData)\n            // Render questions for first page and pagination.\n            .then((questionhtml, jsfooter) => {\n                const questionscontainer = document.querySelector(SELECTORS.QUESTION_CONTAINER_ID);\n                if (questionhtml === undefined) {\n                    questionhtml = '';\n                }\n                if (jsfooter === undefined) {\n                    jsfooter = '';\n                }\n                Templates.replaceNodeContents(questionscontainer, questionhtml, jsfooter);\n                // Resolve filter promise.\n                if (pendingPromise) {\n                    pendingPromise.resolve();\n                }\n            })\n            .fail(Notification.exception);\n    };\n\n    /**\n     * Update URL Param based upon the current filter.\n     *\n     * @param {Object} filters Active filters.\n     */\n    const updateUrlParams = (filters) => {\n        const url = new URL(location.href);\n        const filterQuery = JSON.stringify(filters);\n        url.searchParams.set('filter', filterQuery);\n        history.pushState(filters, '', url);\n        document.querySelectorAll(SELECTORS.BULK_ACTIONS).forEach(bulkAction => {\n            const actionUrl = new URL(bulkAction.formAction);\n            const returnUrl = new URL(actionUrl.searchParams.get('returnurl'));\n            returnUrl.searchParams.set('filter', filterQuery);\n            actionUrl.searchParams.set('returnurl', returnUrl);\n            bulkAction.formAction = actionUrl;\n        });\n    };\n\n    /**\n     * Cleans URL parameters.\n     *\n     */\n    const cleanUrlParams = () => {\n        const queryString = location.search;\n        const urlParams = new URLSearchParams(queryString);\n        if (urlParams.has('cmid')) {\n            const cleanedUrl = new URL(location.href.replace(location.search, ''));\n            cleanedUrl.searchParams.set('cmid', urlParams.get('cmid'));\n            history.pushState({}, '', cleanedUrl);\n        }\n\n        if (urlParams.has('courseid')) {\n            const cleanedUrl = new URL(location.href.replace(location.search, ''));\n            cleanedUrl.searchParams.set('courseid', urlParams.get('courseid'));\n            history.pushState({}, '', cleanedUrl);\n        }\n    };\n\n    // Add listeners for the sorting actions.\n    document.addEventListener('click', e => {\n        const sortableLink = e.target.closest(SELECTORS.SORT_LINK);\n        const paginationLink = e.target.closest(SELECTORS.PAGINATION_LINK);\n        const clearLink = e.target.closest(Selectors.filterset.actions.resetFilters);\n        if (sortableLink) {\n            e.preventDefault();\n            let oldSort = filterCondition.sortdata;\n            filterCondition.sortdata = {};\n            filterCondition.sortdata[sortableLink.dataset.sortname] = sortableLink.dataset.sortorder;\n            for (const sortname in oldSort) {\n                if (sortname !== sortableLink.dataset.sortname) {\n                    filterCondition.sortdata[sortname] = oldSort[sortname];\n                }\n            }\n            filterCondition.qpage = 0;\n            coreFilter.updateTableFromFilter();\n        }\n        if (paginationLink) {\n            e.preventDefault();\n            let attr = paginationLink.getAttribute(\"href\");\n            if (attr !== '#') {\n                const urlParams = new URLSearchParams(attr);\n                filterCondition.qpage = urlParams.get('qpage');\n                coreFilter.updateTableFromFilter();\n            }\n        }\n        if (clearLink) {\n            cleanUrlParams();\n        }\n    });\n\n    // Run apply filter at page load.\n    pagevars = JSON.parse(pagevars);\n    let initialFilters;\n    let filterverb = null;\n    if (pagevars.filters) {\n        // Load initial filter based on page vars.\n        initialFilters = pagevars.filters;\n        if (pagevars.filterverb) {\n            filterverb = pagevars.filterverb;\n        }\n    }\n\n    if (Object.entries(initialFilters).length !== 0) {\n        // Remove the default empty filter row.\n        const emptyFilterRow = filterSet.querySelector(Selectors.filterset.regions.emptyFilterRow);\n        if (emptyFilterRow) {\n            emptyFilterRow.remove();\n        }\n\n        // Add fitlers.\n        let rowcount = 0;\n        for (const urlFilter in initialFilters) {\n            if (urlFilter === 'filterverb') {\n                filterverb = initialFilters[urlFilter];\n                continue;\n            }\n            if (urlFilter !== 'courseid') {\n                // Add each filter row.\n                rowcount += 1;\n                const filterdata = {\n                    filtertype: urlFilter,\n                    values:  initialFilters[urlFilter].values,\n                    jointype: initialFilters[urlFilter].jointype,\n                    filteroptions: initialFilters[urlFilter].filteroptions,\n                    rownum: rowcount\n                };\n                coreFilter.addFilterRow(filterdata);\n            }\n        }\n        coreFilter.filterSet.dataset.filterverb = filterverb;\n        coreFilter.filterSet.querySelector(Selectors.filterset.fields.join).value = filterverb;\n    }\n};\n"],"names":["filterRegionId","defaultcourseid","defaultcategoryid","perpage","contextId","component","callback","view","cmid","pagevars","extraparams","SELECTORS","filterSet","document","querySelector","filterCondition","cat","courseid","filters","filterverb","qpage","qperpage","sortdata","tabname","defaultSort","_document$querySelect","dataset","_document$querySelect2","defaultsort","sortData","JSON","parse","coreFilter","CoreFilter","pendingPromise","applyFilter","init","filterdata","parseInt","Object","keys","length","isNaN","updateUrlParams","viewData","filtercondition","stringify","filterquery","lastchanged","_document$querySelect4","value","loadFragment","then","questionhtml","jsfooter","questionscontainer","undefined","replaceNodeContents","resolve","fail","Notification","exception","url","URL","location","href","filterQuery","searchParams","set","history","pushState","querySelectorAll","forEach","bulkAction","actionUrl","formAction","returnUrl","get","initialFilters","addEventListener","e","sortableLink","target","closest","paginationLink","clearLink","Selectors","filterset","actions","resetFilters","preventDefault","oldSort","sortname","sortorder","updateTableFromFilter","attr","getAttribute","urlParams","URLSearchParams","queryString","search","has","cleanedUrl","replace","cleanUrlParams","entries","emptyFilterRow","regions","remove","rowcount","urlFilter","filtertype","values","jointype","filteroptions","rownum","addFilterRow","fields","join"],"mappings":"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"}