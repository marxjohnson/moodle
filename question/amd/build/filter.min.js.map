{"version":3,"file":"filter.min.js","sources":["../src/filter.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Question bank filter management.\n *\n * @module     core_question/filter\n * @copyright  2021 Tomo Tsuyuki <tomotsuyuki@catalyst-au.net>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport ajax from 'core/ajax';\nimport CoreFilter from 'core_question/qbank_datafilter';\nimport Notification from 'core/notification';\nimport Selectors from 'core/datafilter/selectors';\nimport Templates from 'core/templates';\n\n/**\n * Initialise the question bank filter on the element with the given id.\n *\n * @param {String} filterRegionId id of the filter region\n * @param {String} defaultcourseid default course id\n * @param {String} defaultcategoryid default category id\n * @param {int} perpage number of question per page\n * @param {int} contextId id of the context\n * @param {string} component name of the component for fragment\n * @param {string} callback name of the callback for the fragment\n * @param {string} pagevars name of the callback for the fragment\n * @param {string} extraparams json encoded extra params for the extended apis\n */\nexport const init = (filterRegionId, defaultcourseid, defaultcategoryid,\n                     perpage, contextId, component, callback, pagevars, extraparams) => {\n\n    const filterSet = document.querySelector(`#${filterRegionId}`);\n\n    // Default filter params for WS function.\n    let wsfilter = {\n        // Default value filterset::JOINTYPE_DEFAULT.\n        filters: [],\n        filteroptions: {\n            filterverb: 0,\n        },\n        displayoptions: {\n            perpage: perpage,\n        },\n        sortdata: [\n            {\n                sortby: 'qbank_viewquestiontype\\\\question_type_column',\n                sortorder: 4,\n            }\n        ],\n        defaultcourseid: defaultcourseid,\n        defaultcategoryid: defaultcategoryid,\n    };\n\n    // HTML <div> ID of question container.\n    const SELECTORS = {\n        QUESTION_CONTAINER_ID: '#questionscontainer',\n        SORT_LINK: '#questionscontainer div.sorters a',\n        PAGINATION_LINK: '#questionscontainer a[href].page-link',\n    };\n    let filterQuery = '';\n\n    // Init function with apply callback.\n    const coreFilter = new CoreFilter(filterSet, function(filters, pendingPromise) {\n        applyFilter(filters, pendingPromise);\n    });\n    coreFilter.init();\n\n    /**\n     * Ajax call to retrieve question via ws functions\n     *\n     * @param {Object} filter filter object\n     * @returns {*}\n     */\n    const requestQuestions = filter => {\n        const request = {methodname: 'core_question_filter', args: filter};\n        return ajax.call([request])[0];\n    };\n\n    /**\n     * Retrieve table data.\n     *\n     * @param {Object} filterdata data\n     * @param {Promise} pendingPromise pending promise\n     */\n    const applyFilter = (filterdata, pendingPromise) => {\n        // Getting filter data.\n        // Otherwise, the ws function should retrieves question based on default courseid and cateogryid.\n        if (filterdata) {\n            // Main join types.\n            wsfilter.filteroptions.filterverb = parseInt(filterSet.dataset.filterverb, 10);\n            // Clean old filter\n            wsfilter.filters = [];\n            delete filterdata.filterverb;\n            // Retrieve fitter info.\n            for (const [key, value] of Object.entries(filterdata)) {\n                let filter = {\n                    'filtertype': key,\n                    'jointype': value.jointype,\n                    'rangetype': value.rangetype,\n                    'values': value.values.toString()\n                };\n                wsfilter.filters.push(filter);\n            }\n            if (Object.keys(filterdata).length !== 0) {\n                if (isNaN(wsfilter.filteroptions.filterverb) === false) {\n                    filterdata.filterverb = wsfilter.filteroptions.filterverb;\n                }\n                updateUrlParams(filterdata);\n            }\n        }\n        // Load questions for first page.\n        requestQuestions(wsfilter)\n            .then((response) => {\n                // Cleans any notifications if not needed.\n                let element = document.getElementById('user-notifications');\n                while (element.firstChild) {\n                    element.removeChild(element.firstChild);\n                }\n                if (response.warnings[0] !== undefined) {\n                    if (response.warnings[0].warningcode === 'nocategoryconditionspecified') {\n                        Notification.addNotification({\n                            message: response.warnings[0].message,\n                            type: 'info'\n                          });\n                    }\n                }\n                return renderQuestiondata(response.filtercondition);\n            })\n            // Render questions for first page and pagination.\n            .then((response) => {\n                const questionscontainer = document.querySelector(SELECTORS.QUESTION_CONTAINER_ID);\n                if (response.questionhtml === undefined) {\n                    response.questionhtml = '';\n                }\n                if (response.jsfooter === undefined) {\n                    response.jsfooter = '';\n                }\n                Templates.replaceNodeContents(questionscontainer, response.questionhtml, response.jsfooter);\n                // Resolve filter promise.\n                if (pendingPromise) {\n                    pendingPromise.resolve();\n                }\n            })\n            .fail(Notification.exception);\n    };\n\n    /**\n     * Render question data using the fragment.\n     * @param {object} filtercondition\n     * @return {*}\n     */\n    const renderQuestiondata = (filtercondition) => {\n        const viewData = {\n            component: component,\n            callback: callback,\n            filtercondition: filtercondition,\n            contextid: contextId,\n            extraparams: extraparams,\n            filterquery: filterQuery,\n        };\n        const request = {methodname: 'core_question_view', args: viewData};\n        return ajax.call([request])[0];\n    };\n\n    /**\n     * Update URL Param based upon the current filter.\n     *\n     * @param {Object} filters Active filters.\n     */\n    const updateUrlParams = (filters) => {\n        const url = new URL(location.href);\n        filterQuery = objectToQuery(filters);\n        url.searchParams.set('filter', filterQuery);\n        history.pushState(filters, '', url);\n    };\n\n    /**\n     * Cleans URL parameters.\n     *\n     */\n    const cleanUrlParams = () => {\n        const queryString = location.search;\n        const urlParams = new URLSearchParams(queryString);\n        if (urlParams.has('cmid')) {\n            const cleanedUrl = new URL(location.href.replace(location.search, ''));\n            cleanedUrl.searchParams.set('cmid', urlParams.get('cmid'));\n            history.pushState({}, '', cleanedUrl);\n        }\n\n        if (urlParams.has('courseid')) {\n            const cleanedUrl = new URL(location.href.replace(location.search, ''));\n            cleanedUrl.searchParams.set('courseid', urlParams.get('courseid'));\n            history.pushState({}, '', cleanedUrl);\n        }\n    };\n\n    /**\n     * Convert a nested object into query parameters.\n     *\n     * @param {Object} filters Active filters.\n     * @return {String}\n     */\n    const objectToQuery = (filters) => {\n        return Object.keys(filters).map(key => {\n            let value = filters[key];\n            if (value !== null && typeof value === 'object') {\n                value = objectToQuery(value);\n            }\n            return `${key}=${encodeURIComponent(`${value}`.replace(/\\s/g, '_'))}`;\n        }).join('&');\n    };\n\n    /**\n     * Load URL parameter.\n     *\n     * @return {Object} filters\n     */\n    const loadUrlParams = () => {\n        const queryString = location.search;\n        const urlParams = new URLSearchParams(queryString);\n        if (urlParams.has('filter')) {\n            const filters = queryToObject(urlParams.get('filter'));\n            return filters;\n        }\n        return {};\n    };\n\n    /**\n     * Convert query parameters into object.\n     *\n     * @param {string} query Query representing filter object.\n     * @return {object}\n     */\n    const queryToObject = (query) => {\n        const object = {};\n        const params = new URLSearchParams(query);\n        const entries = params.entries();\n        entries.forEach((value) => {\n            const param = value[0];\n            if (param === 'filterverb') {\n                object[param] = value[1];\n                return;\n            }\n            object[param] = !isNaN(params.get(param)) ? parseInt(params.get(param)) : params.get(param);\n            if (isNaN(object[param]) && object[param].includes('&')) {\n                object[param] = queryToObject(object[param]);\n            }\n            if (param == 'values') {\n                if (typeof object[param] == 'string' && object[param].includes('=')) {\n                    object[param] = [object[param].split('=')[1]];\n                } else if (typeof object[param] == 'number') {\n                    object[param] = [object[param]];\n                } else {\n                    object[param] = Object.values(object[param]);\n                }\n            }\n        });\n        return object;\n    };\n\n    // Add listeners for the sorting actions.\n    document.addEventListener('click', e => {\n        const sortableLink = e.target.closest(SELECTORS.SORT_LINK);\n        const paginationLink = e.target.closest(SELECTORS.PAGINATION_LINK);\n        const clearLink = e.target.closest(Selectors.filterset.actions.resetFilters);\n        if (sortableLink) {\n            e.preventDefault();\n            let oldsort = wsfilter.sortdata;\n            wsfilter.sortdata = [];\n            let sortdata = {\n                sortby: sortableLink.dataset.sortby,\n                sortorder: sortableLink.dataset.sortorder\n            };\n            wsfilter.sortdata.push(sortdata);\n            oldsort.forEach(value => {\n                if (value.sortby !== sortableLink.dataset.sortby) {\n                    wsfilter.sortdata.push(value);\n                }\n            });\n            wsfilter.displayoptions.page = 0;\n            coreFilter.updateTableFromFilter();\n        }\n        if (paginationLink) {\n            e.preventDefault();\n            let attr = e.target.getAttribute(\"href\");\n            if (attr !== '#') {\n                const urlParams = new URLSearchParams(attr);\n                wsfilter.displayoptions.page = urlParams.get('qpage');\n                coreFilter.updateTableFromFilter();\n            }\n        }\n        if (clearLink) {\n            cleanUrlParams();\n        }\n    });\n\n    // Run apply filter at page load.\n    pagevars = JSON.parse(pagevars);\n    let initialFilters;\n    let filterverb = null;\n    if (pagevars.filters) {\n        // Load initial filter based on page vars.\n        initialFilters = pagevars.filters;\n        if (pagevars.filterverb) {\n            filterverb = pagevars.filterverb;\n        }\n    } else {\n        // Otherwise, load filter from URL.\n        initialFilters = loadUrlParams();\n    }\n\n    if (Object.entries(initialFilters).length !== 0) {\n        // Remove the default empty filter row.\n        const emptyFilterRow = filterSet.querySelector(Selectors.filterset.regions.emptyFilterRow);\n        if (emptyFilterRow) {\n            emptyFilterRow.remove();\n        }\n\n        // Add fitlers.\n        let rowcount = 0;\n        for (const urlFilter in initialFilters) {\n            if (urlFilter === 'filterverb') {\n                filterverb = initialFilters[urlFilter];\n                continue;\n            }\n            if (urlFilter !== 'courseid') {\n                // Add each filter row.\n                rowcount += 1;\n                const filterdata = {\n                    filtertype: urlFilter,\n                    values:  initialFilters[urlFilter].values,\n                    jointype: initialFilters[urlFilter].jointype,\n                    rangetype: initialFilters[urlFilter].rangetype,\n                    rownum: rowcount\n                };\n                coreFilter.addFilterRow(filterdata);\n            }\n        }\n        coreFilter.filterSet.dataset.filterverb = filterverb;\n        coreFilter.filterSet.querySelector(Selectors.filterset.fields.join).value = filterverb;\n        // Apply filter.\n        applyFilter(initialFilters);\n    }\n};\n"],"names":["filterRegionId","defaultcourseid","defaultcategoryid","perpage","contextId","component","callback","pagevars","extraparams","filterSet","document","querySelector","wsfilter","filters","filteroptions","filterverb","displayoptions","sortdata","sortby","sortorder","SELECTORS","filterQuery","coreFilter","CoreFilter","pendingPromise","applyFilter","init","filterdata","parseInt","dataset","key","value","Object","entries","filter","jointype","rangetype","values","toString","push","keys","length","isNaN","updateUrlParams","request","methodname","args","ajax","call","requestQuestions","then","response","element","getElementById","firstChild","removeChild","undefined","warnings","warningcode","addNotification","message","type","renderQuestiondata","filtercondition","questionscontainer","questionhtml","jsfooter","replaceNodeContents","resolve","fail","Notification","exception","contextid","filterquery","url","URL","location","href","objectToQuery","searchParams","set","history","pushState","map","encodeURIComponent","replace","join","queryToObject","query","object","params","URLSearchParams","forEach","param","get","includes","split","initialFilters","addEventListener","e","sortableLink","target","closest","paginationLink","clearLink","Selectors","filterset","actions","resetFilters","preventDefault","oldsort","page","updateTableFromFilter","attr","getAttribute","urlParams","queryString","search","has","cleanedUrl","cleanUrlParams","JSON","parse","loadUrlParams","emptyFilterRow","regions","remove","rowcount","urlFilter","filtertype","rownum","addFilterRow","fields"],"mappings":"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"}