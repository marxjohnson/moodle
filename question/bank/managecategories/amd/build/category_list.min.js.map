{"version":3,"file":"category_list.min.js","sources":["../src/category_list.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Javascript module handling ordering of categories.\n *\n * @module     qbank_managecategories\n * @copyright  2021 Catalyst IT Australia Pty Ltd\n * @author     Ghaly Marc-Alexandre <marc-alexandreghaly@catalyst-ca.net>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n *\n */\n\nimport Ajax from 'core/ajax';\nimport Fragment from 'core/fragment';\nimport Notification from 'core/notification';\nimport Pending from 'core/pending';\nimport Templates from 'core/templates';\nimport Modal from 'core/modal';\nimport {get_string as getString} from 'core/str';\n\nconst SELECTORS = {\n    CATEGORY_LIST: '.qbank_managecategories-categorylist',\n    MODAL_CATEGORY_ITEM: '.modal_category_item[data-categoryid]',\n    CATEGORY_RENDERED: '#categoriesrendered',\n    ACTIONABLE_ELEMENT: 'a, [role=\"button\"], [role=\"menuitem\"]',\n    SHOW_DESCRIPTION_CHECKBOX: '[name=\"qbshowdescr\"]',\n    MOVE_CATEGORY_MENU_ITEM: '[role=\"menuitem\"][data-actiontype=\"move\"]',\n    LIST_ITEM: '.qbank_managecategories-item[data-categoryid]',\n    CONTEXT: '.qbank_managecategories-categorylist[data-contextid]',\n    NOT_DRAGGABLE: '[draggable=false]',\n};\n\n/**\n * Sets up sortable list in the column sort order page.\n * @param {number} pagecontextid Context id for fragment.\n */\nconst setupSortableLists = (pagecontextid) => {\n    // Touch events do not have datatransfer property.\n    // This variable is used to store id of first element that started the touch events.\n    let categoryid;\n    // Drag proxy element for touch events.\n    let dragProxy;\n    // Timeout before dragging starts on touch.\n    let touchTimeout;\n    // Interval for scrolling the page with touch.\n    let touchScrollInterval;\n\n    /**\n     * Get touch target at touch point.\n     * The target of all touch events is the first element that has been touched at 'touch start'.\n     * So we need to infer the target from touch point for 'touch move' and 'touch end' events.\n     *\n     * @param {Object} e event\n     * @returns {any | Element}\n     */\n    const getTouchTarget = (e) => {\n        const target = document.elementFromPoint(\n            e.changedTouches[0].clientX,\n            e.changedTouches[0].clientY\n        );\n        // Check if the target is droppable.\n        return target.closest(SELECTORS.LIST_ITEM);\n    };\n\n    /**\n     * Decide if we are before or after the current drop target.\n     *\n     * Based on the current vertical position of the dragged element relative to the mid-point of the\n     * current drop target, decide if dropping will place the dragged element before or after the target.\n     *\n     * @param {Event} event\n     * @param {Element} dropTarget\n     * @return {boolean}\n     */\n    const getInsertBefore = (event, dropTarget) => {\n\n        const clientY = event.changedTouches ? event.changedTouches[0].clientY : event.clientY;\n\n        // Get the current mouse position within the drop target\n        const mouseY = clientY - dropTarget.getBoundingClientRect().top;\n\n        // Get the height of the drop target\n        const targetHeight = dropTarget.clientHeight;\n\n        // Check if the mouse is over the top half of the drop target\n        return mouseY < targetHeight / 2;\n    };\n\n    /**\n     * Remove any drop target indicators currently displayed.\n     */\n    const clearTargetIndicators = () => {\n        const dropTarget = document.querySelector('.qbank_managecategories-category-droptarget');\n        if (dropTarget) {\n            dropTarget.classList.remove('qbank_managecategories-category-droptarget');\n        }\n        const dropTargetBefore = document.querySelector('.qbank_managecategories-category-droptarget-before');\n        if (dropTargetBefore) {\n            dropTargetBefore.classList.remove('qbank_managecategories-category-droptarget-before');\n        }\n    };\n\n    /**\n     * Handle Drag start\n     *\n     * This will register the dragged element so it can be moved when dropped.\n     *\n     * @param {Object} e event\n     */\n    const handleDragStart = (e) => {\n        const target = e.target.closest(SELECTORS.LIST_ITEM);\n\n        // Return if target is not a draggable item.\n        if (!target || e.target.closest(SELECTORS.NOT_DRAGGABLE)) {\n            return;\n        }\n        // Save category ID of current moving item.\n        // The datatransfer is not used as it is not a property of touch events.\n        categoryid = target.dataset?.categoryid;\n\n        if (e.type === 'touchstart') {\n            touchTimeout = undefined;\n            makeDragProxy(e, target);\n        }\n    };\n\n    /**\n     * Touch events don't create a drag proxy, so create one manually.\n     *\n     * @param {Event} event The touchstart event.\n     * @param {Element} element The element being dragged, to create the proxy for.\n     */\n    const makeDragProxy = (event, element) => {\n        if (dragProxy) {\n            dragProxy.remove();\n            dragProxy = null;\n        }\n        dragProxy = document.createElement('div');\n        dragProxy.id = 'qbank_managecategories-dragproxy';\n        dragProxy.classList.add('editing');\n        dragProxy.style.width = element.getBoundingClientRect().width + 'px';\n        dragProxy.style.height = element.getBoundingClientRect().height + 'px';\n        dragProxy.style.top = Math.round(event.touches[0].clientY) + 'px';\n        dragProxy.style.left = Math.round(event.touches[0].clientX) + 'px';\n        dragProxy.innerHTML = element.innerHTML;\n        document.body.appendChild(dragProxy);\n    };\n\n    /**\n     * Handle Drag move\n     *\n     * Keep track of the current drop target, and move the drop indicator to the appropriate position.\n     *\n     * @param {Event} e event\n     */\n    const handleDrag = (e) => {\n        let target;\n        if (e.type === 'touchmove') {\n            if (typeof touchTimeout === 'number') {\n                clearTimeout(touchTimeout);\n                touchTimeout = undefined;\n                return;\n            }\n            target = getTouchTarget(e);\n            touchMoveScroll(e);\n            if (dragProxy) {\n                dragProxy.style.top = Math.round(e.changedTouches[0].clientY) + 'px';\n                dragProxy.style.left = Math.round(e.changedTouches[0].clientX) + 'px';\n            }\n        } else {\n            target = e.target.closest(SELECTORS.LIST_ITEM);\n        }\n        // Return if target is not a droppable item or there is no sourceid.\n        if (!target || !categoryid) {\n            return;\n        }\n\n        // Return if target is a child of the dragged category, so we don't indicate this as a valid drop target.\n        if (target.closest(`[data-categoryid=\"${categoryid}\"]`)) {\n            return;\n        }\n\n        const insertBefore = getInsertBefore(e, target);\n\n        // Remove all target indicators.\n        clearTargetIndicators();\n\n        if (insertBefore && target === target.parentElement.firstElementChild) {\n            // Show the indicator at the top of the list.\n            target.classList.add('qbank_managecategories-category-droptarget-before');\n            return;\n        }\n\n        if (!insertBefore && target === target.parentElement.lastElementChild) {\n            // Show the indicator at the bottom of the list.\n            target.classList.add('qbank_managecategories-category-droptarget');\n            return;\n        }\n\n        const insertTarget = insertBefore ? target : target.nextElementSibling;\n\n        // Show the indicator at the top of the target element.\n        if (insertTarget) {\n            insertTarget.classList.add('qbank_managecategories-category-droptarget-before');\n        }\n    };\n\n    /**\n     * When an item is dragged out of a list, remove the current drag indicators.\n     *\n     * @param {Event} e\n     */\n    const handleDragLeaveList = (e) => {\n        if (e.target.classList.contains('qbank_managecategories-categorylist')) {\n            clearTargetIndicators();\n        }\n    };\n\n    /**\n     * Handle Drag end\n     *\n     * When an item is dropped, find the target element and re-order the categories.\n     * If the item is dropped at the top or bottom of a list, it will be moved before the first or after\n     * the last item, respectively. Otherwise, if it is dropped on the top half of an item, it will be moved\n     * before that item, and if on the bottom half, after that item.\n     *\n     * @param {Event} e event\n     */\n    const handleDragEnd = (e) => {\n        let target;\n        const pending = new Pending('qbank_managecategories/dragend');\n        clearTargetIndicators();\n        if (e.type === 'touchend') {\n            if (typeof touchScrollInterval === 'number') {\n                // Stop scrolling.\n                window.clearInterval(touchScrollInterval);\n                touchScrollInterval = undefined;\n            }\n            if (typeof touchTimeout === 'number') {\n                // Cancel waiting on a long touch to start dragging.\n                window.clearTimeout(touchTimeout);\n                touchTimeout = undefined;\n                return;\n            }\n            if (dragProxy) {\n                dragProxy.remove();\n                dragProxy = null;\n            }\n            target = getTouchTarget(e);\n        } else {\n            target = e.target.closest(SELECTORS.LIST_ITEM);\n        }\n\n        if (!target) {\n            // Check if we're at the top or bottom of the list, and target the first or last element accordingly.\n            const listTarget = e.target.closest(SELECTORS.CATEGORY_LIST);\n            if (listTarget) {\n                if (getInsertBefore(e, listTarget)) {\n                    target = listTarget.firstElementChild;\n                } else {\n                    target = listTarget.lastElementChild;\n                }\n            }\n        }\n\n        // Return if target is not a droppable item or there is no sourceid.\n        if (!target || !categoryid) {\n            return;\n        }\n\n        // Get list item whose id is the same as current moving category id.\n        const source = document.getElementById(`category-${categoryid}`);\n        if (!source) {\n            return;\n        }\n\n        e.preventDefault();\n\n        // Reset sourceid for touch event.\n        categoryid = null;\n\n        let targetCategory;\n        const insertBefore = getInsertBefore(e, target);\n        let before = insertBefore;\n        if (insertBefore && target === target.parentElement.firstElementChild) {\n            targetCategory = target.dataset.categoryid;\n            // Insert the category at the top of the list.\n            target.closest(SELECTORS.CATEGORY_LIST).insertBefore(source, target);\n        } else if (!insertBefore && target === target.parentElement.lastElementChild) {\n            targetCategory = target.dataset.categoryid;\n            // Insert the category at the end of the list.\n            target.closest(SELECTORS.CATEGORY_LIST).appendChild(source);\n        } else {\n            const insertTarget = insertBefore ? target : target.nextElementSibling;\n            targetCategory = insertTarget.dataset.categoryid;\n            before = true; // We always insert before the selected target.\n\n            // Move the source category to its new position.\n            target.closest(SELECTORS.CATEGORY_LIST).insertBefore(source, insertTarget);\n        }\n\n        // Moved category.\n        const originCategory = source.dataset.categoryid;\n\n        // Insert the category after the target category\n        setCatOrder(originCategory, targetCategory, before, pagecontextid, pending);\n    };\n\n    /**\n     * If something is dragged near the top or bottom of the screen by touch, scroll until it is moved away.\n     *\n     * @param {Event} e\n     */\n    const touchMoveScroll = (e) => {\n        if (!categoryid) {\n            return;\n        }\n        const threshold = 50;\n        const timeout = 5;\n        const intervalRunning = typeof touchScrollInterval !== 'undefined';\n        if (e.changedTouches[0].clientY < threshold && !intervalRunning) {\n            touchScrollInterval = window.setInterval(\n                () => {\n                    window.scrollBy(0, -1);\n                },\n                timeout\n            );\n        } else if (window.innerHeight - e.changedTouches[0].clientY < threshold && !intervalRunning) {\n            touchScrollInterval = window.setInterval(\n                () => {\n                    window.scrollBy(0, 1);\n                },\n                timeout\n            );\n        } else if (intervalRunning) {\n            window.clearInterval(touchScrollInterval);\n            touchScrollInterval = undefined;\n        }\n    };\n\n    /**\n     * Allow drop\n     *\n     * This allows elements to be used as a drop target.\n     *\n     * @param {Object} e event\n     */\n    const allowDrop = (e) => {\n        e.preventDefault();\n    };\n\n    const categoryRoot = document.getElementById('categoriesrendered');\n    categoryRoot.addEventListener('dragover', allowDrop);\n    categoryRoot.addEventListener('dragenter', allowDrop);\n    categoryRoot.addEventListener('dragstart', handleDragStart);\n    categoryRoot.addEventListener('dragenter', handleDrag);\n    categoryRoot.addEventListener('dragleave', handleDragLeaveList);\n    categoryRoot.addEventListener('drop', handleDragEnd);\n    categoryRoot.addEventListener('touchmove', handleDrag, false);\n    categoryRoot.addEventListener('touchend', handleDragEnd, false);\n    categoryRoot.addEventListener('touchstart', (e) => {\n        // Delay before we start dragging on touch. This avoids accidental dragging when trying to scroll.\n        touchTimeout = window.setTimeout(() => handleDragStart(e), 500);\n    }, false);\n\n    document.querySelectorAll(SELECTORS.LIST_ITEM + ' ' + SELECTORS.ACTIONABLE_ELEMENT).forEach(element => {\n        // Prevent interactive elements inside a list item from being dragged.\n        element.setAttribute('draggable', false);\n    });\n};\n\n/**\n * Call categories fragment.\n *\n * @param {number} contextid String containing new ordered categories.\n * @returns {Promise}\n */\nconst getCategoriesFragment = (contextid) => {\n    let params = {\n        url: location.href,\n    };\n    return Fragment.loadFragment('qbank_managecategories', 'categories', contextid, params);\n};\n\n/**\n * Call external function update_category_order - inserts the updated column in the question_categories table.\n *\n * @param {number} originCategory Category which was dragged.\n * @param {number} targetCategory Context where category was dropped.\n * @param {boolean} isBeforeTarget True if the category was moved before the target category.\n * @param {number} pageContextId Context from which the category was dragged.\n * @param {Pending} pendingPromise Optional pending promise, will be resolved once the page fragment has been re-rendered.\n */\nconst setCatOrder = (originCategory, targetCategory, isBeforeTarget, pageContextId, pendingPromise = null) => {\n    const call = {\n        methodname: 'qbank_managecategories_update_category_order',\n        args: {\n            categoryid: originCategory,\n            targetcategoryid: targetCategory,\n            isbeforetarget: isBeforeTarget,\n        }\n    };\n    Ajax.call([call])[0]\n        .then(() => {\n            return getCategoriesFragment(pageContextId);\n        })\n        .catch(error => {\n            Notification.addNotification({\n                message: error.message,\n                type: 'error',\n            });\n            document.getElementsByClassName('alert-danger')[0]?.scrollIntoView();\n            return getCategoriesFragment(pageContextId);\n        })\n        .then((html, js) => {\n            Templates.replaceNode('#categoriesrendered', html, js);\n            if (pendingPromise) {\n                pendingPromise.resolve();\n            }\n            return;\n        })\n        .catch(error => {\n            if (pendingPromise) {\n                pendingPromise.reject(error);\n            }\n            Notification.exception(error);\n        });\n};\n\n\n/**\n * Method to add listener on category arrow - descendants.\n *\n * @param {number} pageContextId Context id for fragment.\n */\nconst categoryParentListener = (pageContextId) => {\n    document.querySelector(SELECTORS.CATEGORY_RENDERED).addEventListener('click', e => {\n        // Ignore if there is no categories containers.\n        if (!e.target.closest(SELECTORS.CATEGORY_RENDERED)) {\n            return;\n        }\n\n        // Ignore if there is no action icon.\n        const actionIcon = e.target.closest('.action-icon');\n        if (!actionIcon) {\n            return;\n        }\n\n        e.preventDefault();\n\n        // Retrieve data from action icon.\n        const data = actionIcon.dataset;\n\n        let call;\n        const targetParent = document.querySelector(`#category-${data.tocategory}`);\n        if (!targetParent) {\n            // Moving to the top level. Move after the current parent.\n            const currentParent = actionIcon.closest(SELECTORS.CATEGORY_LIST).closest(SELECTORS.LIST_ITEM);\n            call = {\n                methodname: 'qbank_managecategories_update_category_order',\n                args: {\n                    categoryid: data.tomove,\n                    targetcategoryid: currentParent.dataset.categoryid,\n                    isbeforetarget: false,\n                }\n            };\n        } else {\n            const childList = targetParent.querySelector(SELECTORS.CATEGORY_LIST);\n            if (childList) {\n                // The new parent already has children. Move the category to the end of its list.\n                call = {\n                    methodname: 'qbank_managecategories_update_category_order',\n                    args: {\n                        categoryid: data.tomove,\n                        targetcategoryid: childList.lastElementChild.dataset.categoryid,\n                        isbeforetarget: false,\n                    }\n                };\n            } else {\n                // Move the category to the new parent.\n                call = {\n                    methodname: 'qbank_managecategories_move_category_to_new_parent',\n                    args: {\n                        categoryid: data.tomove,\n                        newparentcategoryid: data.tocategory,\n                    }\n                };\n            }\n        }\n\n        Ajax.call([call])[0]\n            .then(() => getCategoriesFragment(pageContextId))\n            .then((html, js) => {\n                Templates.replaceNode(SELECTORS.CATEGORY_RENDERED, html, js);\n                return;\n            })\n            .catch(Notification.exception);\n    });\n};\n\n/**\n * Sets events listener for checkbox ticking change.\n */\nconst setupShowDescriptionCheckbox = () => {\n    document.addEventListener('click', e => {\n        const checkbox = e.target.closest(SELECTORS.SHOW_DESCRIPTION_CHECKBOX);\n        if (!checkbox) {\n            return;\n        }\n        checkbox.form.submit();\n    });\n};\n\nconst createMoveCategoryList = (item, movingCategory) => {\n    const categories = [];\n    if (item.children) {\n        item.children.forEach(category => {\n            let child = {\n                categoryid: category.dataset.categoryid,\n                categoryname: category.dataset.categoryname,\n                categories: null,\n                firstchild: category === item.children[0],\n                current: category.dataset.categoryid === movingCategory,\n            };\n\n            const childList = category.querySelector(SELECTORS.CATEGORY_LIST);\n            if (childList) {\n                child.categories = createMoveCategoryList(childList, movingCategory);\n            }\n            categories.push(child);\n        });\n    }\n    return categories;\n};\n\n/**\n * Sets events listener for move category using dragdrop icon.\n * @param {number} pagecontextid Context id to get all relevant categories.\n */\nconst setUpMoveMenuItem = (pagecontextid) => {\n    document.querySelector(SELECTORS.CATEGORY_RENDERED).addEventListener('click', async(e) => {\n        // Return if it is not menu item.\n        const item = e.target.closest(SELECTORS.MOVE_CATEGORY_MENU_ITEM);\n        if (!item) {\n            return;\n        }\n        // Return if it is disabled.\n        if (item.getAttribute('aria-disabled')) {\n            return;\n        }\n\n        // Prevent addition click on the item.\n        item.setAttribute('aria-disabled', true);\n\n        let moveList = {contexts: []};\n        const contexts = document.querySelectorAll(SELECTORS.CONTEXT);\n        contexts.forEach(context => {\n            const moveContext = {\n                contextname: context.dataset.contextname,\n                categories: [],\n                hascategories: false,\n            };\n            moveContext.categories = createMoveCategoryList(context, item.dataset.categoryid);\n            moveContext.hascategories = moveContext.categories.length > 0;\n            moveList.contexts.push(moveContext);\n        });\n\n        const modal = await Modal.create({\n            title: getString('movecategory', 'qbank_managecategories', item.dataset.categoryname),\n            body: Templates.render('qbank_managecategories/move_context_list', moveList),\n            footer: '',\n            show: true,\n            large: true,\n        });\n        // Show modal and add click event for list item.\n        modal.getBody()[0].addEventListener('click', e => {\n            const target = e.target.closest(SELECTORS.MODAL_CATEGORY_ITEM);\n            if (!target) {\n                return;\n            }\n            const pending = new Pending('qbank_managecategories/modal');\n            setCatOrder(item.dataset.categoryid, target.dataset.categoryid, target.dataset.before, pagecontextid, pending);\n            modal.destroy();\n        });\n        item.setAttribute('aria-disabled', false);\n    });\n};\n\nexport const init = (pagecontextid) => {\n    categoryParentListener(pagecontextid);\n    setupSortableLists(pagecontextid);\n    setupShowDescriptionCheckbox();\n    setUpMoveMenuItem(pagecontextid);\n};\n"],"names":["SELECTORS","getCategoriesFragment","contextid","params","url","location","href","Fragment","loadFragment","setCatOrder","originCategory","targetCategory","isBeforeTarget","pageContextId","pendingPromise","call","methodname","args","categoryid","targetcategoryid","isbeforetarget","then","catch","error","addNotification","message","type","document","getElementsByClassName","scrollIntoView","html","js","replaceNode","resolve","reject","exception","createMoveCategoryList","item","movingCategory","categories","children","forEach","category","child","dataset","categoryname","firstchild","current","childList","querySelector","push","pagecontextid","addEventListener","e","target","closest","actionIcon","preventDefault","data","targetParent","tocategory","tomove","lastElementChild","newparentcategoryid","currentParent","Notification","dragProxy","touchTimeout","touchScrollInterval","getTouchTarget","elementFromPoint","changedTouches","clientX","clientY","getInsertBefore","event","dropTarget","getBoundingClientRect","top","clientHeight","clearTargetIndicators","classList","remove","dropTargetBefore","handleDragStart","_target$dataset","undefined","makeDragProxy","element","createElement","id","add","style","width","height","Math","round","touches","left","innerHTML","body","appendChild","handleDrag","clearTimeout","touchMoveScroll","insertBefore","parentElement","firstElementChild","insertTarget","nextElementSibling","handleDragEnd","pending","Pending","window","clearInterval","listTarget","source","getElementById","before","intervalRunning","setInterval","scrollBy","innerHeight","allowDrop","categoryRoot","contains","setTimeout","querySelectorAll","setAttribute","setupSortableLists","checkbox","form","submit","async","getAttribute","moveList","contexts","context","moveContext","contextname","hascategories","length","modal","Modal","create","title","Templates","render","footer","show","large","getBody","destroy","setUpMoveMenuItem"],"mappings":"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"}