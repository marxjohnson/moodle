{"version":3,"file":"qbank_column_action.min.js","sources":["../src/qbank_column_action.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Setting up resize, pin, move, and show/hide actions for the specified table\n * Columns on the same header should have same data id attribute as to identify if a column belong to a header.\n *\n *\n * @module     qbank_columnsortorder/qbank_column_action\n * @copyright  2022 Catalyst IT Australia Pty Ltd\n * @author     Nathan Nguyen <nathannguyen@catalyst-ca.net>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {exception as displayException} from 'core/notification';\nimport {get_string as getString} from 'core/str';\nimport * as repository from 'qbank_columnsortorder/repository';\nimport jQuery from 'jquery';\nimport ModalEvents from 'core/modal_events';\nimport ModalFactory from 'core/modal_factory';\nimport Notification from 'core/notification';\nimport Templates from 'core/templates';\nimport SortableList from 'core/sortable_list';\n\n/** The table that we will add action */\nlet table;\n\n/** Data attribute used to identify each colum */\nlet dataIdAttribute;\n\n/** Data attribute used to display name of a column */\nlet dataNameAttribute;\n\n/** To track mouse event on a table header */\nlet currentHeader;\n\n/** Current mouse x postion, to track mouse event on a table header */\nlet currentX;\n\nconst SELECTORS = {\n    MOVE_HANDLE: '[data-action=\"move\"]',\n    RESIZE_HANDLE: '[data-action=\"resize\"]',\n    tableHeader: identifier => `th[data-${dataIdAttribute}=\"${identifier.replace(/[\"\\\\]/g, '\\\\$&')}\"]`,\n    tableColumn: identifier => `td[data-${dataIdAttribute}=\"${identifier.replace(/[\"\\\\]/g, '\\\\$&')}\"]`,\n    tableHeaderSection: tableid => `#${tableid} thead tr`,\n};\n\n/**\n * Add handle\n * @param {Object} context data for each handle.\n * @param {Element} container container cthat will hold a action icon\n * @returns {Promise}\n */\nconst addHandle = (context, container) => {\n    return Templates.renderForPromise('qbank_columnsortorder/action_handle', context)\n        .then(({html, js}) => {\n            Templates.appendNodeContents(container, html, js);\n            return container;\n        });\n};\n\n/**\n * Gets the newly reordered columns to display in the question bank view.\n * @returns {Array}\n */\nconst getColumnOrder = () => {\n    const tableHeaders = table.querySelectorAll(\"th\");\n    const columns = Array.from(tableHeaders).map(column => column.dataset[dataIdAttribute]);\n    return columns.filter((value, index) => columns.indexOf(value) === index);\n};\n\n/**\n * Set up move handle\n * @param {String} handleContainer container class that will hold the move icon.\n * @param {String} component The component to save preferences against.\n */\nconst setUpMoveHandle = (handleContainer, component = '') => {\n    // Add \"move icon\" for each header.\n    const tableHeaders = table.querySelectorAll(\"th:not(.checkbox)\");\n    tableHeaders.forEach(async(header) => {\n        const context = {\n            action: \"move\",\n            target: header.dataset[dataIdAttribute],\n            title: await getString('movecolumn', 'qbank_columnsortorder', header.dataset[dataNameAttribute]),\n            pixicon: \"i/dragdrop\",\n            pixcomponent: \"core\",\n            popup: true\n        };\n        const container = header.querySelector(handleContainer);\n        addHandle(context, container).catch(ex => displayException(ex));\n    });\n\n    const headerSectionSelector = SELECTORS.tableHeaderSection(table.id);\n    const headerSection = jQuery(headerSectionSelector);\n\n    // Implement drag and drop.\n    new SortableList(headerSectionSelector, {\n        moveHandlerSelector: SELECTORS.MOVE_HANDLE,\n        isHorizontal: true\n    });\n\n    headerSection.on(SortableList.EVENTS.DRAGSTART, event => {\n        if (event.target.classList.contains('header')) {\n            event.target.classList.add('active');\n        }\n    });\n\n    headerSection.on(SortableList.EVENTS.DRAGEND, event => {\n        if (event.target.classList.contains('active')) {\n            event.target.classList.remove('active');\n        }\n    });\n\n    headerSection.on(SortableList.EVENTS.DROP, event => {\n        // Current header.\n        const header = event.target;\n        // Find the previous sibling of the header, which will be used when moving columns.\n        const insertAfter = header.previousElementSibling;\n\n        // Move columns.\n        const columns = table.querySelectorAll(SELECTORS.tableColumn(header.dataset[dataIdAttribute]));\n        columns.forEach(column => {\n            const row = column.parentElement;\n            if (insertAfter) {\n                // Find the column to insert after.\n                const insertAfterColumn = row.querySelector(SELECTORS.tableColumn(insertAfter.dataset[dataIdAttribute]));\n                // Insert the column.\n                insertAfterColumn.after(column);\n            } else {\n                // Insert as the first child (first column in the table).\n                row.insertBefore(column, row.firstChild);\n            }\n        });\n\n        // Persist column order.\n        repository.setColumnbankOrder(getColumnOrder(), component).catch(Notification.exception);\n    });\n\n};\n\n/**\n * Get the size of each header.\n *\n * @return {Array}\n */\nconst saveColumnSizes = () => {\n    let columnSizes = [];\n    const tableHeaders = table.querySelectorAll(\"th\");\n    tableHeaders.forEach(header => {\n        // Only get the width set via style attribute (set by pin or move action).\n        let size = {\n            column: header.dataset[dataIdAttribute],\n            width: header.style.width\n        };\n        columnSizes.push(size);\n    });\n    return JSON.stringify(columnSizes);\n};\n\n/**\n * Show a modal containing a number input for changing a column width without click-and-drag.\n *\n * @param {Element} currentHeader The header element that is being resized.\n * @param {String} component The component to save preferences against.\n * @returns {Promise<void>}\n */\nconst showResizeModal = async(currentHeader, component = '') => {\n\n    const initialWidth = currentHeader.offsetWidth;\n\n    const modal = await ModalFactory.create({\n        title: getString('resizecolumn', 'qbank_columnsortorder', currentHeader.textContent),\n        type: ModalFactory.types.SAVE_CANCEL,\n        body: Templates.render('qbank_columnsortorder/resize_modal', {})\n    });\n    const root = modal.getRoot();\n    root.on(ModalEvents.cancel, () => {\n        currentHeader.style.width = initialWidth + 'px';\n    });\n    root.on(ModalEvents.save, () => {\n        repository.setColumnSize(saveColumnSizes(), component).catch(Notification.exception);\n    });\n    modal.show();\n\n    const body = await modal.bodyPromise;\n    const input = body.get(0).querySelector('input');\n    input.value = initialWidth;\n\n    input.addEventListener('change', e => {\n        const newWidth = e.target.value;\n        currentHeader.style.width = newWidth + 'px';\n    });\n};\n\n/**\n * Set up resize handle\n * @param {String} handleContainer container class that will hold the move icon.\n * @param {String} component The component to save preferences against.\n */\nconst setUpResizeHandle = (handleContainer, component) => {\n    // Add \"move icon\" for each header.\n    const tableHeaders = table.querySelectorAll(\"th:not(.checkbox)\");\n    tableHeaders.forEach(async(header) => {\n        const context = {\n            action: \"resize\",\n            target: header.dataset[dataIdAttribute],\n            title: await getString('resizecolumn', 'qbank_columnsortorder', header.dataset[dataNameAttribute]),\n            pixicon: 'resizehandle',\n            pixcomponent: 'qbank_columnsortorder',\n            popup: true\n        };\n        const container = header.querySelector(handleContainer);\n        addHandle(context, container);\n    });\n\n    let moveTracker = false;\n    let currentResizeHandle = null;\n    // Start mouse event on headers.\n    table.addEventListener('mousedown', e => {\n        currentResizeHandle = e.target.closest(SELECTORS.RESIZE_HANDLE);\n        // Return if it is not ' resize' button.\n        if (!currentResizeHandle) {\n            return;\n        }\n        // Save current position.\n        currentX = e.pageX;\n        // Find the header.\n        const target = currentResizeHandle.dataset.target;\n        currentHeader = table.querySelector(SELECTORS.tableHeader(target));\n        moveTracker = false;\n    });\n\n    // Resize column as the mouse move.\n    document.addEventListener('mousemove', e => {\n        if (!currentHeader || !currentResizeHandle || currentX === 0) {\n            return;\n        }\n\n        document.getSelection().removeAllRanges();\n\n        // Offset.\n        const offset = e.pageX - currentX;\n        currentX = e.pageX;\n        const newWidth = currentHeader.offsetWidth + offset;\n        currentHeader.style.width = newWidth + 'px';\n        moveTracker = true;\n    });\n\n    // Set new size when mouse is up.\n    document.addEventListener('mouseup', () => {\n        if (!currentHeader || !currentResizeHandle || currentX === 0) {\n            return;\n        }\n        if (moveTracker) {\n            // If the mouse moved, we are changing the size by drag, so save the change.\n            repository.setColumnSize(saveColumnSizes(), component).catch(Notification.exception);\n        } else {\n            // If the mouse didn't move, display a modal to change the size using a form.\n            showResizeModal(currentHeader, component);\n        }\n        currentHeader = null;\n        currentResizeHandle = null;\n        currentX = 0;\n        moveTracker = false;\n    });\n\n    table.addEventListener('keypress', e => {\n        if (e.key !== 'Enter' && e.key !== ' ') {\n            return;\n        }\n        const resizeHandle = e.target.closest(SELECTORS.RESIZE_HANDLE);\n        // Return if it is not 'resize' button.\n        if (!resizeHandle) {\n            return;\n        }\n        e.preventDefault();\n        e.stopPropagation();\n        const target = resizeHandle.dataset.target;\n        const currentHeader = table.querySelector(SELECTORS.tableHeader(target));\n        showResizeModal(currentHeader, component);\n    });\n};\n\n/**\n * Set up hide/show dropdown\n * @param {String} dropdownContainer container class that will hold the hide/show dropdown.\n * @param {String} component The component to save preferences against.\n */\nconst setUpHideShowDropdown = async(dropdownContainer, component = '') => {\n    const container = document.querySelector(dropdownContainer);\n    let currentHiddenColumns = table.dataset.hiddencolumns;\n    if (currentHiddenColumns) {\n        currentHiddenColumns = JSON.parse(currentHiddenColumns);\n    }\n    let context = {\n        columns: [],\n        text: await getString('showhidecolumn', 'qbank_columnsortorder'),\n        id: \"showhidecolumn\"\n    };\n    const tableHeaders = table.querySelectorAll(\"th:not(.checkbox)\");\n    tableHeaders.forEach(header => {\n        const visible = !currentHiddenColumns || !currentHiddenColumns.includes(header.dataset[dataIdAttribute]);\n        // Data for checkbox.\n        const column = {\n            id: header.dataset[dataIdAttribute],\n            name: header.dataset[dataNameAttribute],\n            checked: visible\n        };\n        context.columns.push(column);\n    });\n\n    return Templates.renderForPromise('qbank_columnsortorder/showhide_dropdown', context)\n        .then(({html, js}) => {\n            Templates.appendNodeContents(container, html, js);\n            addDropdownEventListeners(container, component);\n            return container;\n        });\n};\n\nconst toggleColumnHandler = (checkbox, container, component = '') => {\n    const target = checkbox.value;\n    const header = table.querySelector(SELECTORS.tableHeader(target));\n    if (checkbox.checked === true) {\n        // Show header.\n        header.style.display = \"\";\n        // Show column.\n        const columns = table.querySelectorAll(SELECTORS.tableColumn(target));\n        columns.forEach(column => {\n            column.style.display = \"\";\n        });\n    } else {\n        // Hide header.\n        header.style.display = \"none\";\n        // Hide column.\n        const columns = table.querySelectorAll(SELECTORS.tableColumn(target));\n        columns.forEach(column => {\n            column.style.display = \"none\";\n        });\n    }\n\n    const checkboxes = container.querySelectorAll('input[type=checkbox]');\n    const hiddenColumns = [...checkboxes].filter(checkbox => !checkbox.checked).map(checkbox => checkbox.value);\n    repository.setHiddenColumns(hiddenColumns, component).catch(Notification.exception);\n};\n\n/**\n * Add event listener for drop down item\n * @param {Element} container dropdown container.\n * @param {String} component The component to save preferences against.\n */\nconst addDropdownEventListeners = (container, component = '') => {\n    // Click event when click on an item.\n    container.addEventListener('click', event => {\n        const item = event.target.closest('.dropdown-item');\n        if (!item) {\n            return;\n        }\n        toggleColumnHandler(item.querySelector('input[type=checkbox]'), container, component);\n    });\n    // Keypress inside the list.\n    container.addEventListener('keydown', event => {\n        const item = event.target.closest('.dropdown-item');\n        if (event.key === 'Enter') {\n            // Toggle current item.\n            if (!item) {\n                return;\n            }\n            const checkbox = item.querySelector('input[type=checkbox]');\n            checkbox.checked = !checkbox.checked;\n            toggleColumnHandler(checkbox, container, component);\n        } else if (event.key === 'ArrowUp' || event.key === 'ArrowDown') {\n            // Up or down - move up and down the list.\n            const item = event.target.closest('.dropdown-item');\n            let target = event.currentTarget.querySelector('.dropdown-item:first-of-type');\n            if (item) {\n                if (event.key === 'ArrowUp') {\n                    target = item.previousElementSibling ?? event.currentTarget.querySelector('.dropdown-item:last-of-type');\n                } else {\n                    target = item.nextElementSibling ?? event.currentTarget.querySelector('.dropdown-item:first-of-type');\n                }\n            }\n            target.querySelector('input[type=checkbox]').focus();\n            event.preventDefault();\n        } else {\n            // Ignore all other keys.\n            return;\n        }\n    });\n};\n\n/**\n * Current hidden columns\n */\nconst setUpCurrentHiddenColumns = () => {\n    let currentHiddenColumns = table.dataset.hiddencolumns;\n    if (currentHiddenColumns) {\n        currentHiddenColumns = JSON.parse(currentHiddenColumns);\n    }\n    if (currentHiddenColumns.length > 0) {\n        currentHiddenColumns.forEach(pluginname => {\n            if (!pluginname) {\n                return;\n            }\n            const header = table.querySelector(SELECTORS.tableHeader(pluginname));\n            header.style.display = \"none\";\n            const cells = table.querySelectorAll(SELECTORS.tableColumn(pluginname));\n            cells.forEach(cell => {\n                cell.style.display = \"none\";\n            });\n        });\n    }\n};\n\n/**\n * Set up initial column sizes.\n *\n * If there is a saved column size for the column, use that. Otherwise, set it to the current width of the column on screen.\n */\nconst setUpCurrentColumnSizes = () => {\n    const currentColumnSizes = table.dataset.colsize;\n    let decodedSizes = [];\n    if (currentColumnSizes) {\n        decodedSizes = JSON.parse(currentColumnSizes);\n        if (!Array.isArray(decodedSizes)) {\n            decodedSizes = [];\n        }\n    }\n    const headers = table.querySelectorAll('th');\n    headers.forEach(header => {\n        const colSize = decodedSizes.find(colSize => colSize.column === header.dataset.pluginname);\n        if (colSize && colSize.width !== '') {\n            header.style.width = colSize.width;\n        } else {\n            header.style.width = header.offsetWidth + 'px';\n        }\n    });\n    // Set the width of the table to min-content, so that it can grow beyond the page width, and cells can shrink below their\n    // content width.\n    table.style.width = 'min-content';\n};\n\n/**\n * Initialize module\n *\n * @param {String} id unique id for columns.\n * @return {Boolean} True if the table was set up, false if it was already set up.\n */\nconst setUpTable = (id) => {\n    table = document.getElementById(id);\n\n    // Check if the table is already setup.\n    if (table.dataset.setup == 'true') {\n        return false;\n    }\n\n    dataIdAttribute = 'pluginname';\n    dataNameAttribute = 'name';\n\n    // Add class to each column as to identify them later.\n    const tableHeaders = table.querySelectorAll(\"th\");\n    const rows = table.querySelectorAll(\"tr\");\n    rows.forEach(row => {\n        const columns = row.querySelectorAll(\"td\");\n        for (let i = 0; i < columns.length; i++) {\n            columns[i].dataset[dataIdAttribute] = tableHeaders[i].dataset[dataIdAttribute];\n        }\n    });\n\n    // Prevent from setting up the table again.\n    table.dataset.setup = 'true';\n    return true;\n};\n\n/**\n * Initialise module.\n *\n * Set up the table based on the current settings, and add controls to each column header if\n * editing is enabled.\n *\n * @param {String} tableId ID of the question bank table\n * @param {Boolean} isEditing Should we show the move, resize and pin controls?\n * @param {String} component Component to save user preferences to (empty will save changes to admin settings)\n */\nexport const init = (tableId, isEditing, component = '') => {\n    if (!setUpTable(tableId)) {\n        // Table has already been set up, nothing more to do.\n        return;\n    }\n\n    setUpCurrentHiddenColumns();\n    setUpCurrentColumnSizes();\n\n    if (isEditing) {\n        setUpHideShowDropdown(\"#show-hide-dropdown\", component).catch(Notification.exception);\n        setUpMoveHandle(\".move-handle\", component);\n        setUpResizeHandle(\".resize-handle\", component);\n    }\n};\n"],"names":["table","dataIdAttribute","dataNameAttribute","currentHeader","currentX","SELECTORS","identifier","replace","tableid","addHandle","context","container","Templates","renderForPromise","then","_ref","html","js","appendNodeContents","getColumnOrder","tableHeaders","querySelectorAll","columns","Array","from","map","column","dataset","filter","value","index","indexOf","setUpMoveHandle","handleContainer","component","forEach","async","action","target","header","title","pixicon","pixcomponent","popup","querySelector","catch","ex","headerSectionSelector","id","headerSection","SortableList","moveHandlerSelector","isHorizontal","on","EVENTS","DRAGSTART","event","classList","contains","add","DRAGEND","remove","DROP","insertAfter","previousElementSibling","row","parentElement","after","insertBefore","firstChild","repository","setColumnbankOrder","Notification","exception","saveColumnSizes","columnSizes","size","width","style","push","JSON","stringify","showResizeModal","initialWidth","offsetWidth","modal","ModalFactory","create","textContent","type","types","SAVE_CANCEL","body","render","root","getRoot","ModalEvents","cancel","save","setColumnSize","show","bodyPromise","input","get","addEventListener","e","newWidth","setUpResizeHandle","moveTracker","currentResizeHandle","closest","pageX","document","getSelection","removeAllRanges","offset","key","resizeHandle","preventDefault","stopPropagation","setUpHideShowDropdown","dropdownContainer","currentHiddenColumns","hiddencolumns","parse","text","visible","includes","name","checked","_ref2","addDropdownEventListeners","toggleColumnHandler","checkbox","display","checkboxes","hiddenColumns","setHiddenColumns","item","currentTarget","nextElementSibling","focus","setUpCurrentHiddenColumns","length","pluginname","cell","setUpCurrentColumnSizes","currentColumnSizes","colsize","decodedSizes","isArray","colSize","find","setUpTable","getElementById","setup","i","tableId","isEditing"],"mappings":"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"}