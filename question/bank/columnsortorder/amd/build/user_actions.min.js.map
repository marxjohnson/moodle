{"version":3,"file":"user_actions.min.js","sources":["../src/user_actions.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Javascript for customising the user's view of the question bank\n *\n * @module     qbank_columnsortorder/user_actions\n * @copyright  2021 Catalyst IT Australia Pty Ltd\n * @author     Ghaly Marc-Alexandre <marc-alexandreghaly@catalyst-ca.net>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport * as actions from 'qbank_columnsortorder/actions';\nimport * as repository from 'qbank_columnsortorder/repository';\nimport {get_string as getString} from 'core/str';\nimport ModalEvents from 'core/modal_events';\nimport ModalSaveCancel from 'core/modal_save_cancel';\nimport Notification from \"core/notification\";\nimport SortableList from 'core/sortable_list';\nimport Templates from \"core/templates\";\n\n\nconst SELECTORS = {\n    uiRoot: '.questionbankwindow',\n    moveAction: '.menu-action[data-action=move]',\n    resizeAction: '.menu-action[data-action=resize]',\n    resizeHandle: '.qbank_columnsortorder-action-handle.resize',\n    handleContainer: '.handle-container',\n    headerContainer: '.header-container',\n    tableColumn: identifier => `td[data-columnid=\"${identifier.replace(/[\"\\\\]/g, '\\\\$&')}\"]`,\n};\n\n/** To track mouse event on a table header */\nlet currentHeader;\n\n/** Current mouse x postion, to track mouse event on a table header */\nlet currentX;\n\n/** Minimum size for the column currently being resized. */\nlet currentMin;\n\n/**\n * Flag to temporarily prevent move and resize handles from being shown or hidden.\n *\n * @type {boolean}\n */\nlet suspendShowHideHandles = false;\n\n/**\n * Add handle containers for move and resize handles.\n *\n * @param {Element} uiRoot The root element of the quesiton bank UI.\n * @return {Promise} Resolved after the containers have been added to each column header.\n */\nconst addHandleContainers = uiRoot => {\n    return new Promise((resolve) => {\n        const headerContainers = uiRoot.querySelectorAll(SELECTORS.headerContainer);\n        Templates.renderForPromise('qbank_columnsortorder/handle_container', {})\n            .then(({html, js}) => {\n                headerContainers.forEach(container => {\n                    Templates.prependNodeContents(container, html, js);\n                });\n                resolve();\n                return headerContainers;\n            }).catch(Notification.exception);\n    });\n};\n\n/**\n * Render move handles in each container.\n *\n * This takes a list of the move actions rendered in each column header, and creates a corresponding drag handle for each.\n *\n * @param {NodeList} moveActions Menu actions for moving columns.\n */\nconst setUpMoveHandles = moveActions => {\n    moveActions.forEach(moveAction => {\n        const header = moveAction.closest('th');\n        header.classList.add('qbank-sortable-column');\n        const handleContainer = header.querySelector(SELECTORS.handleContainer);\n        const context = {\n            action: \"move\",\n            dragtype: \"move\",\n            target: '',\n            title: moveAction.title,\n            pixicon: \"i/dragdrop\",\n            pixcomponent: \"core\",\n            popup: true\n        };\n        return Templates.renderForPromise('qbank_columnsortorder/action_handle', context)\n            .then(({html, js}) => {\n                Templates.prependNodeContents(handleContainer, html, js);\n                return handleContainer;\n            }).catch(Notification.exception);\n    });\n};\n\n/**\n * Serialise the current column sizes.\n *\n * This finds the current width set in each column header's style property, and returns them encoded as a JSON string.\n *\n * @param {Element} uiRoot The root element of the quesiton bank UI.\n * @return {String} JSON array containing a list of objects with column and width properties.\n */\nconst serialiseColumnSizes = (uiRoot) => {\n    const columnSizes = [];\n    const tableHeaders = uiRoot.querySelectorAll('th');\n    tableHeaders.forEach(header => {\n        // Only get the width set via style attribute (set by move action).\n        const width = parseInt(header.style.width);\n        if (!width || isNaN(width)) {\n            return;\n        }\n        columnSizes.push({\n            column: header.dataset.columnid,\n            width: width\n        });\n    });\n    return JSON.stringify(columnSizes);\n};\n\n/**\n * Find the minimum width for a header, based on the width of its contents.\n *\n * This is to simulate `min-width: min-content;`, which doesn't work on Chrome because\n * min-width is ignored width `table-layout: fixed;`.\n *\n * @param {Element} header The table header\n * @return {Number} The minimum width in pixels\n */\nconst getMinWidth = (header) => {\n    const contents = Array.from(header.querySelector('.header-text').children);\n    const contentWidth = contents.reduce((width, contentElement) => width + contentElement.getBoundingClientRect().width, 0);\n    return Math.ceil(contentWidth);\n};\n\n/**\n * Render resize handles in each container.\n *\n * This takes a list of the resize actions rendered in each column header, and creates a corresponding drag handle for each.\n * It also initialises the event handlers for the drag handles and resize modal.\n *\n * @param {Element} uiRoot Question bank UI root element.\n */\nconst setUpResizeHandles = (uiRoot) => {\n    const resizeActions = uiRoot.querySelectorAll(SELECTORS.resizeAction);\n    resizeActions.forEach(resizeAction => {\n        const headerContainer = resizeAction.closest(SELECTORS.headerContainer);\n        const header = resizeAction.closest(actions.SELECTORS.sortableColumn);\n        const minWidth = getMinWidth(header);\n        if (header.offsetWidth < minWidth) {\n            header.style.width = minWidth + 'px';\n        }\n        const handleContainer = headerContainer.querySelector(SELECTORS.handleContainer);\n        const context = {\n            action: \"resize\",\n            target: '',\n            title: resizeAction.title,\n            pixicon: 'i/twoway',\n            pixcomponent: 'core',\n            popup: true\n        };\n        return Templates.renderForPromise('qbank_columnsortorder/action_handle', context)\n            .then(({html, js}) => {\n                Templates.appendNodeContents(handleContainer, html, js);\n                return handleContainer;\n            }).catch(Notification.exception);\n    });\n\n    let moveTracker = false;\n    let currentResizeHandle = null;\n    // Start mouse event on headers.\n    uiRoot.addEventListener('mousedown', e => {\n        currentResizeHandle = e.target.closest(SELECTORS.resizeHandle);\n        // Return if it is not ' resize' button.\n        if (!currentResizeHandle) {\n            return;\n        }\n        // Save current position.\n        currentX = e.pageX;\n        // Find the header.\n        currentHeader = e.target.closest(actions.SELECTORS.sortableColumn);\n        currentMin = getMinWidth(currentHeader);\n        moveTracker = false;\n        suspendShowHideHandles = true;\n    });\n\n    // Resize column as the mouse move.\n    document.addEventListener('mousemove', e => {\n        if (!currentHeader || !currentResizeHandle || currentX === 0) {\n            return;\n        }\n\n        // Prevent text selection as the handle is dragged.\n        document.getSelection().removeAllRanges();\n\n        // Adjust the column width according the amount the handle was dragged.\n        const offset = e.pageX - currentX;\n        currentX = e.pageX;\n        const newWidth = currentHeader.offsetWidth + offset;\n        if (newWidth >= currentMin) {\n            currentHeader.style.width = newWidth + 'px';\n        }\n        moveTracker = true;\n    });\n\n    // Set new size when mouse is up.\n    document.addEventListener('mouseup', () => {\n        if (!currentHeader || !currentResizeHandle || currentX === 0) {\n            return;\n        }\n        if (moveTracker) {\n            // If the mouse moved, we are changing the size by drag, so save the change.\n            repository.setColumnSize(serialiseColumnSizes(uiRoot)).catch(Notification.exception);\n        } else {\n            // If the mouse didn't move, display a modal to change the size using a form.\n            showResizeModal(currentHeader, uiRoot);\n        }\n        currentMin = null;\n        currentHeader = null;\n        currentResizeHandle = null;\n        currentX = 0;\n        moveTracker = false;\n        suspendShowHideHandles = false;\n    });\n};\n\n/**\n * Event handler for resize actions in each column header.\n *\n * This will listen for a click on any resize action, and activate the corresponding resize modal.\n *\n * @param {Element} uiRoot Question bank UI root element.\n */\nconst setUpResizeActions = uiRoot => {\n    uiRoot.addEventListener('click', (e) => {\n        const resizeAction = e.target.closest(SELECTORS.resizeAction);\n        if (resizeAction) {\n            e.preventDefault();\n            const currentHeader = resizeAction.closest('th');\n            showResizeModal(currentHeader, uiRoot);\n        }\n    });\n};\n\n/**\n * Show a modal containing a number input for changing a column width without click-and-drag.\n *\n * @param {Element} currentHeader The header element that is being resized.\n * @param {Element} uiRoot The question bank UI root element.\n * @returns {Promise<void>}\n */\nconst showResizeModal = async(currentHeader, uiRoot) => {\n    const initialWidth = currentHeader.offsetWidth;\n    const minWidth = getMinWidth(currentHeader);\n\n    const modal = await ModalSaveCancel.create({\n        title: getString('resizecolumn', 'qbank_columnsortorder', currentHeader.textContent),\n        body: Templates.render('qbank_columnsortorder/resize_modal', {width: initialWidth, min: minWidth}),\n        show: true,\n    });\n    const root = modal.getRoot();\n    root.on(ModalEvents.cancel, () => {\n        currentHeader.style.width = `${initialWidth}px`;\n    });\n    root.on(ModalEvents.save, () => {\n        repository.setColumnSize(serialiseColumnSizes(uiRoot)).catch(Notification.exception);\n    });\n\n    const body = await modal.bodyPromise;\n    const input = body.get(0).querySelector('input');\n\n    input.addEventListener('change', e => {\n        const valid = e.target.checkValidity();\n        e.target.closest('.has-validation').classList.add('was-validated');\n        if (valid) {\n            window.console.log('setting width');\n            const newWidth = e.target.value;\n            currentHeader.style.width = `${newWidth}px`;\n        }\n    });\n};\n\n/**\n * Event handler for move actions in each column header.\n *\n * This will listen for a click on any move action, pass the click to the corresponding move handle, causing its modal to be shown.\n *\n * @param {Element} uiRoot Question bank UI root element.\n */\nconst setUpMoveActions = uiRoot => {\n    uiRoot.addEventListener('click', e => {\n        const moveAction = e.target.closest(SELECTORS.moveAction);\n        if (moveAction) {\n            e.preventDefault();\n            const sortableColumn = moveAction.closest(actions.SELECTORS.sortableColumn);\n            const moveHandle = sortableColumn.querySelector(actions.SELECTORS.moveHandler);\n            moveHandle.click();\n        }\n    });\n};\n\n/**\n * Event handler for showing and hiding handles when the mouse is over a column header.\n *\n * Implementing this behaviour using the :hover CSS pseudoclass is not sufficient, as the mouse may move over the neighbouring\n * header while dragging, leading to some odd behaviour. This allows us to suspend the show/hide behaviour while a handle is being\n * dragged, and so keep the active handle visible until the drag is finished.\n *\n * @param {Element} uiRoot Question bank UI root element.\n */\nconst setupShowHideHandles = uiRoot => {\n    let shownHeader = null;\n    let tableHead = uiRoot.querySelector('thead');\n    uiRoot.addEventListener('mouseover', e => {\n        if (suspendShowHideHandles) {\n            return;\n        }\n        const header = e.target.closest(actions.SELECTORS.sortableColumn);\n        if (!header && !shownHeader) {\n            return;\n        }\n        if (!header || header !== shownHeader) {\n            tableHead.querySelector('.show-handles')?.classList.remove('show-handles');\n            shownHeader = header;\n            if (header) {\n                header.classList.add('show-handles');\n            }\n        }\n    });\n};\n\n/**\n * Event handler for sortable list DROP event.\n *\n * Find all table cells corresponding to the column of the dropped header, and move them to the new position.\n *\n * @param {Event} event\n */\nconst reorderColumns = event => {\n    // Current header.\n    const header = event.target;\n    // Find the previous sibling of the header, which will be used when moving columns.\n    const insertAfter = header.previousElementSibling;\n    // Move columns.\n    const uiRoot = document.querySelector(SELECTORS.uiRoot);\n    const columns = uiRoot.querySelectorAll(SELECTORS.tableColumn(header.dataset.columnid));\n    columns.forEach(column => {\n        const row = column.parentElement;\n        if (insertAfter) {\n            // Find the column to insert after.\n            const insertAfterColumn = row.querySelector(SELECTORS.tableColumn(insertAfter.dataset.columnid));\n            // Insert the column.\n            insertAfterColumn.after(column);\n        } else {\n            // Insert as the first child (first column in the table).\n            row.insertBefore(column, row.firstChild);\n        }\n    });\n};\n\n/**\n * Initialize module\n *\n * Add containers for the drag handles to each column header, then render handles, enable show/hide behaviour, set up drag/drop\n * column sorting, then enable the move and resize modals to be triggered from menu actions.\n */\nexport const init = async() => {\n    const uiRoot = document.getElementById('questionscontainer');\n    await addHandleContainers(uiRoot);\n    setUpMoveHandles(uiRoot.querySelectorAll(SELECTORS.moveAction));\n    setUpResizeHandles(uiRoot);\n    setupShowHideHandles(uiRoot);\n    const sortableColumns = actions.setupSortableLists(uiRoot.querySelector(actions.SELECTORS.columnList));\n    sortableColumns.on(SortableList.EVENTS.DROP, reorderColumns);\n    sortableColumns.on(SortableList.EVENTS.DRAGSTART, () => {\n        suspendShowHideHandles = true;\n    });\n    sortableColumns.on(SortableList.EVENTS.DRAGEND, () => {\n        suspendShowHideHandles = false;\n    });\n    setUpMoveActions(uiRoot);\n    setUpResizeActions(uiRoot);\n    actions.setupActionButtons(uiRoot);\n};\n"],"names":["SELECTORS","identifier","replace","currentHeader","currentX","currentMin","suspendShowHideHandles","serialiseColumnSizes","uiRoot","columnSizes","querySelectorAll","forEach","header","width","parseInt","style","isNaN","push","column","dataset","columnid","JSON","stringify","getMinWidth","contentWidth","Array","from","querySelector","children","reduce","contentElement","getBoundingClientRect","Math","ceil","showResizeModal","async","initialWidth","offsetWidth","minWidth","modal","ModalSaveCancel","create","title","textContent","body","Templates","render","min","show","root","getRoot","on","ModalEvents","cancel","save","repository","setColumnSize","catch","Notification","exception","bodyPromise","get","addEventListener","e","valid","target","checkValidity","closest","classList","add","window","console","log","newWidth","value","reorderColumns","event","insertAfter","previousElementSibling","document","row","parentElement","after","insertBefore","firstChild","getElementById","Promise","resolve","headerContainers","renderForPromise","then","_ref","html","js","container","prependNodeContents","addHandleContainers","moveAction","handleContainer","context","action","dragtype","pixicon","pixcomponent","popup","_ref2","resizeAction","headerContainer","actions","sortableColumn","_ref3","appendNodeContents","moveTracker","currentResizeHandle","pageX","getSelection","removeAllRanges","offset","setUpResizeHandles","shownHeader","tableHead","remove","setupShowHideHandles","sortableColumns","setupSortableLists","columnList","SortableList","EVENTS","DROP","DRAGSTART","DRAGEND","preventDefault","moveHandler","click","setUpMoveActions","setUpResizeActions","setupActionButtons"],"mappings":"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"}